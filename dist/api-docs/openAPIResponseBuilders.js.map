{"version":3,"sources":["../../src/api-docs/openAPIResponseBuilders.ts","../../src/common/models/serviceResponse.ts"],"sourcesContent":["import { StatusCodes } from 'http-status-codes';\r\nimport { z } from 'zod';\r\n\r\nimport { ServiceResponseSchema } from '@/common/models/serviceResponse';\r\n\r\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\r\n  return {\r\n    [statusCode]: {\r\n      description,\r\n      content: {\r\n        'application/json': {\r\n          schema: ServiceResponseSchema(schema),\r\n        },\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\n// Use if you want multiple responses for a single endpoint\r\n\r\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\r\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\r\n// export type ApiResponseConfig = {\r\n//   schema: z.ZodTypeAny;\r\n//   description: string;\r\n//   statusCode: StatusCodes;\r\n// };\r\n// export function createApiResponses(configs: ApiResponseConfig[]) {\r\n//   const responses: { [key: string]: ResponseConfig } = {};\r\n//   configs.forEach(({ schema, description, statusCode }) => {\r\n//     responses[statusCode] = {\r\n//       description,\r\n//       content: {\r\n//         'application/json': {\r\n//           schema: ServiceResponseSchema(schema),\r\n//         },\r\n//       },\r\n//     };\r\n//   });\r\n//   return responses;\r\n// }\r\n","import { z } from 'zod';\r\n\r\nexport enum ResponseStatus {\r\n  Success,\r\n  Failed,\r\n}\r\n\r\nexport class ServiceResponse<T = null> {\r\n  success: boolean;\r\n  message: string;\r\n  responseObject: T;\r\n  statusCode: number;\r\n\r\n  constructor(status: ResponseStatus, message: string, responseObject: T, statusCode: number) {\r\n    this.success = status === ResponseStatus.Success;\r\n    this.message = message;\r\n    this.responseObject = responseObject;\r\n    this.statusCode = statusCode;\r\n  }\r\n}\r\n\r\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\r\n  z.object({\r\n    success: z.boolean(),\r\n    message: z.string(),\r\n    responseObject: dataSchema.optional(),\r\n    statusCode: z.number(),\r\n  });\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA4B;;;ACA5B,iBAAkB;AAqBX,IAAM,wBAAwB,CAAyB,eAC5D,aAAE,OAAO;AAAA,EACP,SAAS,aAAE,QAAQ;AAAA,EACnB,SAAS,aAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,aAAE,OAAO;AACvB,CAAC;;;ADtBI,SAAS,kBAAkB,QAAsB,aAAqB,aAAa,qCAAY,IAAI;AACxG,SAAO;AAAA,IACL,CAAC,UAAU,GAAG;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,oBAAoB;AAAA,UAClB,QAAQ,sBAAsB,MAAM;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":[]}