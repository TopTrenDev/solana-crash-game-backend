{"version":3,"sources":["../../src/controllers/race.ts","../../src/common/models/Race.ts","../../src/common/models/RaceEntry.ts","../../src/common/models/User.ts","../../src/common/models/Usero.ts","../../src/config/index.ts","../../src/controllers/vip.ts"],"sourcesContent":["// Require Dependencies\r\nimport Race from '../common/models/Race.js';\r\nimport RaceEntry from '../common/models/RaceEntry.js';\r\nimport User from '../common/models/User.js';\r\nimport Usero from '../common/models/Usero.js';\r\n\r\nimport { getVipLevelFromWager } from './vip.js';\r\n\r\n// Enter an active race (if there is currently one active)\r\nasync function checkAndEnterRace(userId: string, amount: number): Promise<void> {\r\n  return new Promise<void>(async (resolve, reject) => {\r\n    try {\r\n      // Get active race\r\n      const activeRace = await Race.findOne({ active: true });\r\n\r\n      // If there is an active race\r\n      if (activeRace) {\r\n        // Find the user in the fakeUsers array\r\n        const users = await Usero.findOne({ _id: userId });\r\n\r\n        if (users) {\r\n          // If user is not in the fakeUsers array, query the database\r\n          const user = await Usero.findOne({ _id: userId });\r\n\r\n          if (!user || user.rank > 1) {\r\n            // If user doesn't exist or isn't allowed to participate\r\n            // Resolve to successfully continue\r\n            return resolve();\r\n          }\r\n\r\n          const existingEntry = await RaceEntry.findOne({\r\n            _user: userId,\r\n            _race: activeRace.id,\r\n          });\r\n\r\n          if (existingEntry) {\r\n            await RaceEntry.updateOne(\r\n              { _id: existingEntry.id },\r\n              {\r\n                $inc: { value: amount },\r\n                $set: {\r\n                  user_level: getVipLevelFromWager(user.wager).name,\r\n                  user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n                  username: user.username,\r\n                  avatar: user.avatar,\r\n                },\r\n              }\r\n            );\r\n          } else {\r\n            const newEntry = new RaceEntry({\r\n              value: amount,\r\n              _user: userId,\r\n              user_level: getVipLevelFromWager(user.wager).name,\r\n              user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n              _race: activeRace.id,\r\n              username: user.username,\r\n              avatar: user.avatar,\r\n            });\r\n\r\n            await newEntry.save();\r\n          }\r\n        } else {\r\n          // If user is not in the fakeUsers array, query the database\r\n          const user = await User.findOne({ _id: userId });\r\n\r\n          if (!user || user.rank > 1) {\r\n            // If user doesn't exist or isn't allowed to participate\r\n            // Resolve to successfully continue\r\n            return resolve();\r\n          }\r\n\r\n          const existingEntry = await RaceEntry.findOne({\r\n            _user: userId,\r\n            _race: activeRace.id,\r\n          });\r\n\r\n          if (existingEntry) {\r\n            await RaceEntry.updateOne(\r\n              { _id: existingEntry.id },\r\n              {\r\n                $inc: { value: amount },\r\n                $set: {\r\n                  user_level: getVipLevelFromWager(user.wager).name,\r\n                  user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n                  username: user.username,\r\n                  avatar: user.avatar,\r\n                },\r\n              }\r\n            );\r\n          } else {\r\n            const newEntry = new RaceEntry({\r\n              value: amount,\r\n              _user: userId,\r\n              user_level: getVipLevelFromWager(user.wager).name,\r\n              user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n              _race: activeRace.id,\r\n              username: user.username,\r\n              avatar: user.avatar,\r\n            });\r\n\r\n            await newEntry.save();\r\n          }\r\n        }\r\n\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      } else {\r\n        // If there is no active race\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Increment active race prize by rake% (if there is currently one active)\r\nasync function checkAndApplyRakeToRace(rakeValue: number) {\r\n  return new Promise<void>(async (resolve, reject) => {\r\n    try {\r\n      // Get active race\r\n      const activeRace = await Race.findOne({ active: true });\r\n\r\n      // If there is an active race\r\n      if (activeRace) {\r\n        // Update and increment race prize | here was something changed from the original\r\n        await Race.updateOne({ _id: activeRace.id }, { $inc: { prize: 0 } });\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      } else {\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Export functions\r\nexport { checkAndEnterRace, checkAndApplyRakeToRace };\r\n","// Import Dependencies\r\nimport mongoose from \"mongoose\";\r\n\r\n// Destructure Schema Types\r\nconst { Schema, Types: SchemaTypes } = mongoose;\r\n\r\n// Setup Race Schema\r\nconst RaceSchema = new Schema({\r\n  // Basic fields\r\n  active: Boolean,\r\n  prize: Number,\r\n  endingDate: Date,\r\n\r\n  // Race winners\r\n  winners: {\r\n    type: [\r\n      {\r\n        type: SchemaTypes.ObjectId,\r\n        ref: \"User\",\r\n      },\r\n    ],\r\n    default: [],\r\n  },\r\n\r\n  // When race was created\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Create and export the new model\r\nconst Race = mongoose.model(\"Race\", RaceSchema);\r\n\r\nexport default Race;\r\n","// Require Dependencies\r\nimport mongoose from 'mongoose'\r\nconst SchemaTypes = mongoose.Schema.Types;\r\n\r\n// Setup RaceEntry Schema\r\nconst RaceEntrySchema = new mongoose.Schema({\r\n  // How much user has contributed to this race\r\n  value: Number,\r\n\r\n  // Who owns this entry\r\n  _user: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: \"User\",\r\n  },\r\n\r\n  user_level: {\r\n    type: String\r\n  },\r\n\r\n  user_levelColor: {\r\n    type: String\r\n  },\r\n\r\n  username: {\r\n    type: String\r\n  },\r\n\r\n  avatar: {\r\n    type: String\r\n  },\r\n\r\n  // What race is this entry for\r\n  _race: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: \"Race\",\r\n  },\r\n\r\n  // When race was created\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Create and export the new model\r\nconst RaceEntry = mongoose.model(\r\n  \"RaceEntry\",\r\n  RaceEntrySchema\r\n)\r\n\r\nexport default RaceEntry;","// Import Dependencies\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\n// Destructure Schema Types\r\nconst { Schema, Types } = mongoose;\r\n\r\n// Setup User Schema\r\nconst UserSchema = new Schema({\r\n  // Authentication related fields\r\n  provider: String,\r\n  providerId: String,\r\n  username: String,\r\n  password: String,\r\n  avatar: String,\r\n\r\n  // User's on-site rank\r\n  rank: {\r\n    type: Number,\r\n    default: 1,\r\n    /**\r\n     * Ranks:\r\n     *\r\n     * 1 = User\r\n     * 2 = Sponsor\r\n     * 3 = Developer\r\n     * 4 = Moderator\r\n     * 5 = Admin\r\n     */\r\n  },\r\n\r\n  // Site balance\r\n  wallet: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Wager amount\r\n  wager: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Holds user's crypto address information (addresses)\r\n  crypto: Object,\r\n\r\n  // Whether the user has verified their account (via mobile phone or csgo loyalty badge) normal it is false\r\n  hasVerifiedAccount: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n\r\n  // Store their phone number to prevent multi-account verifications\r\n  verifiedPhoneNumber: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  // When the account was verified\r\n  accountVerified: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unix ms timestamp when the ban will end, 0 = no ban\r\n  banExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // Unix ms timestamps when the self-exclude will end, 0 = no ban\r\n  selfExcludes: {\r\n    crash: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    jackpot: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    coinflip: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    roulette: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n\r\n  // Unix ms timestamp when the mute will end, 0 = no mute\r\n  muteExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // If user has restricted transactions\r\n  transactionsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // If user has restricted bets\r\n  betsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // UserID of the user who affiliated\r\n  _affiliatedBy: {\r\n    type: Types.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n\r\n  // When the affiliate was redeemed\r\n  affiliateClaimed: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unique affiliate code\r\n  affiliateCode: {\r\n    type: String,\r\n    default: null,\r\n    // unique: true, // doesn't work with multiple \"null\" values :(\r\n  },\r\n\r\n  // User affiliation bonus amount\r\n  affiliateMoney: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much affiliation bonus has been claimed (withdrawn)\r\n  affiliateMoneyCollected: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  forgotExpires: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much rakeback has been collected\r\n  rakebackBalance: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Keep track of 50% deposit amount\r\n  // required by mitch :/\r\n  wagerNeededForWithdraw: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of deposits\r\n  totalDeposited: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of withdraws\r\n  totalWithdrawn: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User custom wager limit (for sponsors)\r\n  customWagerLimit: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User avatar last update\r\n  avatarLastUpdate: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // When user was created (registered)\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport interface IUserDocumentType {\r\n  provider: string;\r\n  providerId: string;\r\n  username: string;\r\n  password: string;\r\n  avatar: string;\r\n  rank: number;\r\n  wallet: number;\r\n  wager: number;\r\n  crypto: any; // Specify more detailed type if possible\r\n  hasVerifiedAccount: boolean;\r\n  verifiedPhoneNumber: string | null;\r\n  accountVerified: Date | null;\r\n  banExpires: string;\r\n  selfExcludes: {\r\n    crash: number;\r\n    jackpot: number;\r\n    coinflip: number;\r\n    roulette: number;\r\n  };\r\n  muteExpires: string;\r\n  transactionsLocked: boolean;\r\n  betsLocked: boolean;\r\n  _affiliatedBy: mongoose.Schema.Types.ObjectId | null;\r\n  affiliateClaimed: Date | null;\r\n  affiliateCode: string | null;\r\n  affiliateMoney: number;\r\n  affiliateMoneyCollected: number;\r\n  forgotToken: string | null;\r\n  forgotExpires: number;\r\n  rakebackBalance: number;\r\n  wagerNeededForWithdraw: number;\r\n  totalDeposited: number;\r\n  totalWithdrawn: number;\r\n  customWagerLimit: number;\r\n  avatarLastUpdate: number;\r\n  created: Date;\r\n}\r\n\r\n// Extend Document to include the User schema fields\r\nexport interface UserDocumentType extends Document, IUserDocumentType {}\r\n\r\n// Create and export the new model\r\nconst User = mongoose.model<UserDocumentType>('User', UserSchema);\r\n\r\nexport default User;\r\n","// Import Dependencies\r\nimport mongoose, { Document } from 'mongoose';\r\nconst { Schema, SchemaTypes } = mongoose;\r\n\r\n// Setup User Schema\r\nconst UseroSchema = new Schema({\r\n  // Authentication related fields\r\n  provider: String,\r\n  providerId: String,\r\n  username: String,\r\n  password: String,\r\n  avatar: String,\r\n\r\n  // User's on-site rank\r\n  rank: {\r\n    type: Number,\r\n    default: 1,\r\n    /**\r\n     * Ranks:\r\n     *\r\n     * 1 = User\r\n     * 2 = Sponsor\r\n     * 3 = Developer\r\n     * 4 = Moderator\r\n     * 5 = Admin\r\n     */\r\n  },\r\n\r\n  // Site balance\r\n  wallet: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Wager amount\r\n  wager: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Holds user's crypto address information (addresses)\r\n  crypto: Object,\r\n\r\n  // Whether the user has verified their account (via mobile phone or csgo loyalty badge) normal it is false\r\n  hasVerifiedAccount: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n\r\n  // Store their phone number to prevent multi-account verifications\r\n  verifiedPhoneNumber: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  // When the account was verified\r\n  accountVerified: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unix ms timestamp when the ban will end, 0 = no ban\r\n  banExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // Unix ms timestamps when the self-exclude will end, 0 = no ban\r\n  selfExcludes: {\r\n    crash: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    jackpot: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    coinflip: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    roulette: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n\r\n  // Unix ms timestamp when the mute will end, 0 = no mute\r\n  muteExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // If user has restricted transactions\r\n  transactionsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // If user has restricted bets\r\n  betsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // UserID of the user who affiliated\r\n  _affiliatedBy: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n\r\n  // When the affiliate was redeemed\r\n  affiliateClaimed: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unique affiliate code\r\n  affiliateCode: {\r\n    type: String,\r\n    default: null,\r\n    // unique: true, // doesn't work with multiple \"null\" values :(\r\n  },\r\n\r\n  // User affiliation bonus amount\r\n  affiliateMoney: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much affiliation bonus has been claimed (withdrawn)\r\n  affiliateMoneyCollected: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  forgotExpires: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much rakeback has been collected\r\n  rakebackBalance: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Keep track of 50% deposit amount\r\n  // required by mitch :/\r\n  wagerNeededForWithdraw: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of deposits\r\n  totalDeposited: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of withdraws\r\n  totalWithdrawn: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User custom wager limit (for sponsors)\r\n  customWagerLimit: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User avatar last update\r\n  avatarLastUpdate: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // When user was created (registered)\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport interface IUseroDocumentType extends Document {\r\n  provider: string;\r\n  providerId: string;\r\n  username: string;\r\n  password: string;\r\n  avatar: string;\r\n  rank: number;\r\n  wallet: number;\r\n  wager: number;\r\n  crypto: Record<string, any>;\r\n  hasVerifiedAccount: boolean;\r\n  verifiedPhoneNumber: string | null;\r\n  accountVerified: Date | null;\r\n  banExpires: string;\r\n  selfExcludes: {\r\n    crash: number;\r\n    jackpot: number;\r\n    coinflip: number;\r\n    roulette: number;\r\n  };\r\n  muteExpires: string;\r\n  transactionsLocked: boolean;\r\n  betsLocked: boolean;\r\n  _affiliatedBy: mongoose.Types.ObjectId | null;\r\n  affiliateClaimed: Date | null;\r\n  affiliateCode: string | null;\r\n  affiliateMoney: number;\r\n  affiliateMoneyCollected: number;\r\n  forgotToken: string | null;\r\n  forgotExpires: number;\r\n  rakebackBalance: number;\r\n  wagerNeededForWithdraw: number;\r\n  totalDeposited: number;\r\n  totalWithdrawn: number;\r\n  customWagerLimit: number;\r\n  avatarLastUpdate: number;\r\n  created: Date;\r\n}\r\n\r\nexport interface UseroDocumentType extends Document, IUseroDocumentType {}\r\n\r\n// Create and export the new model\r\nconst Usero = mongoose.model<UseroDocumentType>('Usero', UseroSchema);\r\n\r\nexport default Usero;\r\n","export const site = {\r\n  // Site configurations on server startup\r\n  enableMaintenanceOnStart: false,\r\n  manualWithdrawsEnabled: true,\r\n  enableLoginOnStart: true,\r\n  // Site endpoints\r\n  backend: {\r\n    productionUrl: '', //kujiracasino.com is virtual domain\r\n    developmentUrl: 'http://localhost:8080',\r\n  },\r\n  frontend: {\r\n    productionUrl: '', //localhost do http://localhost:3000 // else if you deploy it put \"https://kujiracasino.com\"\r\n    developmentUrl: 'http://localhost:3000',\r\n  },\r\n  adminFrontend: {\r\n    productionUrl: '',\r\n    developmentUrl: '',\r\n  },\r\n};\r\n\r\n// Each specific game configuration\r\nexport const database = {\r\n  developmentMongoURI: 'mongodb://127.0.0.1:27017/solcrash', // MongoURI to use in development\r\n  productionMongoURI: 'mongodb+srv://oliverb25f:FujiOka8-1225@cluster0.ughyjc0.mongodb.net/crash', // MongoURI to use in production\r\n};\r\n\r\nexport const games = {\r\n  exampleGame: {\r\n    minBetAmount: 1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.1, // House fee percentage\r\n  },\r\n  race: {\r\n    prizeDistribution: [40, 20, 14.5, 7, 5.5, 4.5, 3.5, 2.5, 1.5, 1], // How is the prize distributed (place = index + 1)\r\n  },\r\n  vip: {\r\n    minDepositForWithdraw: 5, // You must have deposited atleast this amount before withdrawing\r\n    minWithdrawAmount: 5, // Minimum Withdraw Amount\r\n    levelToChat: 2, // The level amount you need to chat\r\n    levelToTip: 15, // The level to use the tip feature in chat\r\n    levelToRain: 10, // The level amount to start a rain\r\n    wagerToJoinRain: 5, // The wager amount to join the rain in chat\r\n    minRakebackClaim: 2, // The min rakeback amount you need to claim rakeback\r\n    numLevels: 500, // Number of total levels\r\n    minWager: 0, // minWager\r\n    maxWager: 502007, // maxWager\r\n    rakeback: 21.66, // Max rakeback\r\n    vipLevelNAME: ['Beginner', 'Professional', 'Expert', 'Crown'],\r\n    vipLevelCOLORS: ['rgb(215, 117, 88)', 'rgb(71, 190, 219)', 'rgb(96, 183, 100)', 'rgb(152, 38, 38)'],\r\n  },\r\n  affiliates: {\r\n    earningPercentage: 10, // How many percentage of house edge the affiliator will get\r\n  },\r\n  coinflip: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.05, // House fee percentage\r\n  },\r\n  crash: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100, // Max bet amount (in coins)\r\n    maxProfit: 500, // Max profit on crash, forces auto cashout\r\n    houseEdge: 0.05, // House edge percentage\r\n  },\r\n};\r\n\r\nexport const blochain = {\r\n  // EOS Blockchain provider API root url\r\n  // without following slashes\r\n  httpProviderApi: 'http://eos.greymass.com',\r\n};\r\n\r\nexport const authentication = {\r\n  jwtSecret: 'vf4Boy2WT1bVgphxFqjEY2GjciChkXvf4Boy2WT1hkXv2', // Secret used to sign JWT's. KEEP THIS AS A SECRET 45 length\r\n  jwtExpirationTime: 360000, // JWT-token expiration time (in seconds)\r\n  revenueId: '65ab8f6ed19ce703808382b2',\r\n};\r\n","// Import Dependencies\r\nimport User from '../common/models/User.js';\r\nimport Usero from '../common/models/Usero.js';\r\nimport { games } from '../config/index.js';\r\n\r\nimport { VIPLevelType } from '@/common/types/vipType.js';\r\n\r\nconst { numLevels, minWager, maxWager, rakeback, vipLevelNAME, vipLevelCOLORS } = games.vip;\r\n\r\n// Generate VIP Levels\r\nconst generateVIPLevels = (numLevels, minWager, maxWager, rakeback, levelNames, levelColors) => {\r\n  const levels = [];\r\n  for (let i = 0; i < numLevels; i++) {\r\n    const level = {\r\n      name: (i + 1).toString(),\r\n      wagerNeeded: (minWager + (maxWager - minWager) * Math.pow(i / numLevels, 2)).toFixed(2),\r\n      rakebackPercentage: (rakeback / (1 + Math.exp(-5 * (i / numLevels - 0.5)))).toFixed(2),\r\n      levelName: levelNames[Math.floor((i * levelNames.length) / numLevels)],\r\n      levelColor: levelColors[Math.floor((i * levelColors.length) / numLevels)],\r\n    };\r\n    levels.push(level);\r\n  }\r\n  return levels;\r\n};\r\n\r\nconst vipLevels = generateVIPLevels(numLevels, minWager, maxWager, rakeback, vipLevelNAME, vipLevelCOLORS);\r\n\r\n// Get user VIP level\r\nconst getVipLevelFromWager = (wager): VIPLevelType => {\r\n  if (wager < vipLevels[1].wagerNeeded) {\r\n    return vipLevels[0];\r\n  } else if (wager > vipLevels[numLevels - 1].wagerNeeded) {\r\n    return vipLevels[numLevels - 1];\r\n  } else {\r\n    return vipLevels.filter((level) => wager >= level.wagerNeeded).sort((a, b) => b.wagerNeeded - a.wagerNeeded)[0];\r\n  }\r\n};\r\n\r\n// Get user next VIP level\r\nconst getNextVipLevelFromWager = (wager) => {\r\n  return vipLevels.filter((level) => wager < level.wagerNeeded).sort((a, b) => a.wagerNeeded - b.wagerNeeded)[0];\r\n};\r\n\r\n// Check if user is eligible for rakeback\r\nconst checkAndApplyRakeback = async (userId, houseRake) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const usero = await Usero.findOne({ _id: userId });\r\n\r\n      if (usero) {\r\n        // Skip rakeback calculation for excluded users\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const user = await User.findOne({ _id: userId });\r\n\r\n      if (!user) {\r\n        // User not found\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      // Find the corresponding level\r\n      const currentLevel = getVipLevelFromWager(user.wager);\r\n\r\n      // Update document\r\n      await User.updateOne(\r\n        { _id: user.id },\r\n        {\r\n          $inc: { rakebackBalance: houseRake * (currentLevel.rakebackPercentage / 100) },\r\n        }\r\n      );\r\n\r\n      // Resolve to continue successfully\r\n      resolve();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Export functions\r\nexport {\r\n  vipLevels,\r\n  vipLevelNAME,\r\n  vipLevelCOLORS,\r\n  getVipLevelFromWager,\r\n  getNextVipLevelFromWager,\r\n  checkAndApplyRakeback,\r\n};\r\n"],"mappings":"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","names":["mongoose","import_mongoose","SchemaTypes","mongoose","import_mongoose","Schema","mongoose","import_mongoose","Schema","SchemaTypes","mongoose","numLevels","minWager","maxWager","rakeback"]}