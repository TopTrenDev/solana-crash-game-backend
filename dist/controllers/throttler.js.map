{"version":3,"sources":["../../src/controllers/throttler.ts"],"sourcesContent":["// Import Dependencies\r\nimport colors from 'colors/safe.js';\r\nimport { Socket } from 'socket.io';\r\nimport { ServerToClientEvents, ClientToServerEvents, InterServerEvents, SocketData } from '@/common/types';\r\n\r\n// Declare variables\r\nconst TIME_LIMIT = 250; // How often the socket can emit an event (ms)\r\n\r\n// Define a type for the packet to improve type safety\r\ntype PacketType = [string, ...any[]];\r\n\r\n// Socket.io socket middleware\r\nconst throttleConnections =\r\n  (socket: Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>) =>\r\n  (packet: PacketType, next: (err?: any) => void) => {\r\n    if (canBeServed(socket, packet)) return next();\r\n    else return socket.emit('notify-error', 'Slow down! You must wait a while before doing that again.');\r\n  };\r\n\r\n// If socket connection can be served\r\nconst canBeServed = (\r\n  socket: Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>,\r\n  packet: PacketType\r\n) => {\r\n  // If socket is marked for disconnect, deny access\r\n  if (socket.data.markedForDisconnect) return false;\r\n\r\n  // Get last request timestamp\r\n  const previous = socket.data.lastAccess;\r\n  const now = Date.now();\r\n\r\n  // If socket had previous interaction\r\n  if (previous) {\r\n    // Get time difference\r\n    const diff = now - previous;\r\n\r\n    // If it was an auth packet\r\n    if (packet[0] === 'auth') {\r\n      // Else add a last access timestamp and move on\r\n      socket.data.lastAccess = now;\r\n      return true;\r\n    }\r\n\r\n    // Check the time difference and disconnect if needed\r\n    if (diff < TIME_LIMIT) {\r\n      // Set socket as not serveable\r\n      socket.data.markedForDisconnect = true;\r\n\r\n      const clientIp = socket.handshake.headers['x-real-ip'];\r\n\r\n      // Timeout to disconnect the socket\r\n      setTimeout(() => {\r\n        console.log(\r\n          colors.gray('Socket >> IP:'),\r\n          colors.white(String(clientIp)),\r\n          colors.gray(`Packet: [${packet.toString()}] NSP: ${socket.nsp.name} Disconnected, reason:`),\r\n          colors.red('TOO_MANY_EMITS')\r\n        );\r\n        socket.emit('connection_kicked');\r\n        // Disconnect the underlying connection\r\n        socket.disconnect(true);\r\n      }, 1000);\r\n\r\n      // Deny access\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Else add a last access timestamp and move on\r\n  socket.data.lastAccess = now;\r\n  return true;\r\n};\r\n\r\n// Export the functions\r\nexport default throttleConnections;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAmB;AAKnB,IAAM,aAAa;AAMnB,IAAM,sBACJ,CAAC,WACD,CAAC,QAAoB,SAA8B;AACjD,MAAI,YAAY,QAAQ,MAAM;AAAG,WAAO,KAAK;AAAA;AACxC,WAAO,OAAO,KAAK,gBAAgB,2DAA2D;AACrG;AAGF,IAAM,cAAc,CAClB,QACA,WACG;AAEH,MAAI,OAAO,KAAK;AAAqB,WAAO;AAG5C,QAAM,WAAW,OAAO,KAAK;AAC7B,QAAM,MAAM,KAAK,IAAI;AAGrB,MAAI,UAAU;AAEZ,UAAM,OAAO,MAAM;AAGnB,QAAI,OAAO,CAAC,MAAM,QAAQ;AAExB,aAAO,KAAK,aAAa;AACzB,aAAO;AAAA,IACT;AAGA,QAAI,OAAO,YAAY;AAErB,aAAO,KAAK,sBAAsB;AAElC,YAAM,WAAW,OAAO,UAAU,QAAQ,WAAW;AAGrD,iBAAW,MAAM;AACf,gBAAQ;AAAA,UACN,YAAAA,QAAO,KAAK,eAAe;AAAA,UAC3B,YAAAA,QAAO,MAAM,OAAO,QAAQ,CAAC;AAAA,UAC7B,YAAAA,QAAO,KAAK,YAAY,OAAO,SAAS,CAAC,UAAU,OAAO,IAAI,IAAI,wBAAwB;AAAA,UAC1F,YAAAA,QAAO,IAAI,gBAAgB;AAAA,QAC7B;AACA,eAAO,KAAK,mBAAmB;AAE/B,eAAO,WAAW,IAAI;AAAA,MACxB,GAAG,GAAI;AAGP,aAAO;AAAA,IACT;AAAA,EACF;AAGA,SAAO,KAAK,aAAa;AACzB,SAAO;AACT;AAGA,IAAO,oBAAQ;","names":["colors"]}