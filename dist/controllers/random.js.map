{"version":3,"sources":["../../src/controllers/random.ts","../../src/config/index.ts","../../src/controllers/blockchain.ts"],"sourcesContent":["// Require Dependencies\r\nimport { games } from '../config/index.js';\r\nimport crypto from 'crypto';\r\nimport Chance from 'chance';\r\nimport { generateHex, getPublicSeed } from './blockchain.js';\r\n\r\n// Generate a secure random number\r\nconst generatePrivateSeed = async (): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    crypto.randomBytes(256, (error, buffer) => {\r\n      if (error) reject(error);\r\n      else resolve(buffer.toString('hex'));\r\n    });\r\n  });\r\n};\r\n\r\n// Hash an input (private seed) to SHA256\r\nconst buildPrivateHash = async (seed: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const hash = crypto.createHash('sha256').update(seed).digest('hex');\r\n\r\n      resolve(hash);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate a private seed and hash pair\r\nconst generatePrivateSeedHashPair = async (): Promise<{ seed: string; hash: string }> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const seed = await generatePrivateSeed();\r\n      const hash = await buildPrivateHash(seed);\r\n\r\n      resolve({ seed, hash });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate coinflip random data\r\nconst generateCoinflipRandom = async (\r\n  gameId: string,\r\n  privateSeed: string\r\n): Promise<{ publicSeed: string; module: number }> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      // Get a new public seed from blockchain\r\n      const publicSeed = await getPublicSeed();\r\n\r\n      // Construct a new chance instance with\r\n      // privateSeed-roundId-publicSeed pair\r\n      const chance = new Chance(`${privateSeed}-${gameId}-${publicSeed}`);\r\n\r\n      // Generate a random, repeatable module to determine round result\r\n      const module = chance.floating({ min: 0, max: 60, fixed: 7 });\r\n\r\n      // Resolve promise and return data\r\n      resolve({ publicSeed, module });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate crash random data\r\nconst generateCrashRandom = async (privateSeed: string): Promise<{ publicSeed: string; crashPoint: number }> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      // Get a new public seed from blockchain\r\n      const publicSeed = generateHex(); //await getPublicSeed();\r\n      // Generate Crash Point with seed and salt\r\n      const crashPoint = generateCrashPoint(privateSeed, publicSeed);\r\n      // Resolve promise and return data\r\n      resolve({ publicSeed, crashPoint });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nconst generateCrashPoint = (seed: string, salt: string): number => {\r\n  const hash = crypto.createHmac('sha256', seed).update(salt).digest('hex');\r\n\r\n  const hs = Math.floor(100 / (games.crash.houseEdge * 100));\r\n  if (isCrashHashDivisible(hash, hs)) {\r\n    return 100;\r\n  }\r\n\r\n  const h = parseInt(hash.slice(0, 52 / 4), 16);\r\n  const e = Math.pow(2, 52);\r\n\r\n  return Math.floor((100 * e - h) / (e - h));\r\n};\r\n\r\nconst isCrashHashDivisible = (hash: string, mod: number): boolean => {\r\n  let val = 0;\r\n\r\n  let o = hash.length % 4;\r\n  for (let i = o > 0 ? o - 4 : 0; i < hash.length; i += 4) {\r\n    val = ((val << 16) + parseInt(hash.substring(i, i + 4), 16)) % mod;\r\n  }\r\n\r\n  return val === 0;\r\n};\r\n\r\n// Export all functions\r\nexport { generatePrivateSeedHashPair, generateCoinflipRandom, generateCrashRandom };\r\n","export const site = {\r\n  // Site configurations on server startup\r\n  enableMaintenanceOnStart: false,\r\n  manualWithdrawsEnabled: true,\r\n  enableLoginOnStart: true,\r\n  // Site endpoints\r\n  backend: {\r\n    productionUrl: '', //kujiracasino.com is virtual domain\r\n    developmentUrl: 'http://localhost:8080',\r\n  },\r\n  frontend: {\r\n    productionUrl: '', //localhost do http://localhost:3000 // else if you deploy it put \"https://kujiracasino.com\"\r\n    developmentUrl: 'http://localhost:3000',\r\n  },\r\n  adminFrontend: {\r\n    productionUrl: '',\r\n    developmentUrl: '',\r\n  },\r\n};\r\n\r\n// Each specific game configuration\r\nexport const database = {\r\n  developmentMongoURI: 'mongodb://127.0.0.1:27017/solcrash', // MongoURI to use in development\r\n  productionMongoURI: 'mongodb+srv://oliverb25f:FujiOka8-1225@cluster0.ughyjc0.mongodb.net/crash', // MongoURI to use in production\r\n};\r\n\r\nexport const games = {\r\n  exampleGame: {\r\n    minBetAmount: 1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.1, // House fee percentage\r\n  },\r\n  race: {\r\n    prizeDistribution: [40, 20, 14.5, 7, 5.5, 4.5, 3.5, 2.5, 1.5, 1], // How is the prize distributed (place = index + 1)\r\n  },\r\n  vip: {\r\n    minDepositForWithdraw: 5, // You must have deposited atleast this amount before withdrawing\r\n    minWithdrawAmount: 5, // Minimum Withdraw Amount\r\n    levelToChat: 2, // The level amount you need to chat\r\n    levelToTip: 15, // The level to use the tip feature in chat\r\n    levelToRain: 10, // The level amount to start a rain\r\n    wagerToJoinRain: 5, // The wager amount to join the rain in chat\r\n    minRakebackClaim: 2, // The min rakeback amount you need to claim rakeback\r\n    numLevels: 500, // Number of total levels\r\n    minWager: 0, // minWager\r\n    maxWager: 502007, // maxWager\r\n    rakeback: 21.66, // Max rakeback\r\n    vipLevelNAME: ['Beginner', 'Professional', 'Expert', 'Crown'],\r\n    vipLevelCOLORS: ['rgb(215, 117, 88)', 'rgb(71, 190, 219)', 'rgb(96, 183, 100)', 'rgb(152, 38, 38)'],\r\n  },\r\n  affiliates: {\r\n    earningPercentage: 10, // How many percentage of house edge the affiliator will get\r\n  },\r\n  coinflip: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.05, // House fee percentage\r\n  },\r\n  crash: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100, // Max bet amount (in coins)\r\n    maxProfit: 500, // Max profit on crash, forces auto cashout\r\n    houseEdge: 0.05, // House edge percentage\r\n  },\r\n};\r\n\r\nexport const blochain = {\r\n  // EOS Blockchain provider API root url\r\n  // without following slashes\r\n  httpProviderApi: 'http://eos.greymass.com',\r\n};\r\n\r\nexport const authentication = {\r\n  jwtSecret: 'vf4Boy2WT1bVgphxFqjEY2GjciChkXvf4Boy2WT1hkXv2', // Secret used to sign JWT's. KEEP THIS AS A SECRET 45 length\r\n  jwtExpirationTime: 360000, // JWT-token expiration time (in seconds)\r\n  revenueId: '65ab8f6ed19ce703808382b2',\r\n};\r\n","// Require Dependencies\r\nimport { JsonRpc } from 'eosjs';\r\nimport { blochain } from '../config/index.js';\r\nimport fetch from 'node-fetch'; // node only; not needed in browsers\r\nconst rpc = new JsonRpc(blochain.httpProviderApi, { fetch });\r\n\r\n// Grab EOS block with id\r\nconst getPublicSeed = async (): Promise<string> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const info = await rpc.get_info();\r\n      const blockNumber = info.last_irreversible_block_num + 1;\r\n      const block = await rpc.get_block(blockNumber || 1);\r\n      resolve(block.id);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate Hash\r\nconst generateHex = () => {\r\n  let result = '';\r\n  for (let i = 0; i < 64; i++) {\r\n    result += Math.floor(Math.random() * 16)\r\n      .toString(16)\r\n      .padStart(2, '0');\r\n  }\r\n  return result;\r\n};\r\n\r\n// Export functions\r\nexport { getPublicSeed, generateHex };\r\n"],"mappings":"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","names":["fetch","crypto","Chance","module"]}