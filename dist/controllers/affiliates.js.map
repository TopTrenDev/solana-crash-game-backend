{"version":3,"sources":["../../src/controllers/affiliates.ts","../../src/common/models/User.ts","../../src/common/models/Usero.ts","../../src/config/index.ts"],"sourcesContent":["// Require Dependencies\r\nimport User from '@/common/models/User.js';\r\nimport Usero from '@/common/models/Usero.js';\r\nimport { games } from '@/config/index.js';\r\n\r\n// Give affiliator his cut of wager\r\nasync function checkAndApplyAffiliatorCut(userId, houseRake) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const usero = await Usero.findOne({ _id: userId });\r\n\r\n      if (usero) {\r\n        // Skip rakeback calculation for excluded users\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const user = await User.findOne({ _id: userId });\r\n\r\n      if (!user) {\r\n        // User not found\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      // Find the affiliator\r\n      const affiliator = await User.findOne({ _id: user._affiliatedBy });\r\n\r\n      // If user has affiliator\r\n      if (affiliator) {\r\n        // Update document\r\n        await User.updateOne(\r\n          { _id: affiliator.id },\r\n          {\r\n            $inc: {\r\n              affiliateMoney: houseRake * (games.affiliates.earningPercentage / 100),\r\n            },\r\n          }\r\n        );\r\n\r\n        // Resolve to continue successfully\r\n        resolve();\r\n      } else {\r\n        // Resolve to continue successfully\r\n        resolve();\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Export functions\r\nexport { checkAndApplyAffiliatorCut };\r\n","// Import Dependencies\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\n// Destructure Schema Types\r\nconst { Schema, Types } = mongoose;\r\n\r\n// Setup User Schema\r\nconst UserSchema = new Schema({\r\n  // Authentication related fields\r\n  provider: String,\r\n  providerId: String,\r\n  username: String,\r\n  password: String,\r\n  avatar: String,\r\n\r\n  // User's on-site rank\r\n  rank: {\r\n    type: Number,\r\n    default: 1,\r\n    /**\r\n     * Ranks:\r\n     *\r\n     * 1 = User\r\n     * 2 = Sponsor\r\n     * 3 = Developer\r\n     * 4 = Moderator\r\n     * 5 = Admin\r\n     */\r\n  },\r\n\r\n  // Site balance\r\n  wallet: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Wager amount\r\n  wager: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Holds user's crypto address information (addresses)\r\n  crypto: Object,\r\n\r\n  // Whether the user has verified their account (via mobile phone or csgo loyalty badge) normal it is false\r\n  hasVerifiedAccount: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n\r\n  // Store their phone number to prevent multi-account verifications\r\n  verifiedPhoneNumber: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  // When the account was verified\r\n  accountVerified: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unix ms timestamp when the ban will end, 0 = no ban\r\n  banExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // Unix ms timestamps when the self-exclude will end, 0 = no ban\r\n  selfExcludes: {\r\n    crash: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    jackpot: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    coinflip: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    roulette: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n\r\n  // Unix ms timestamp when the mute will end, 0 = no mute\r\n  muteExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // If user has restricted transactions\r\n  transactionsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // If user has restricted bets\r\n  betsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // UserID of the user who affiliated\r\n  _affiliatedBy: {\r\n    type: Types.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n\r\n  // When the affiliate was redeemed\r\n  affiliateClaimed: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unique affiliate code\r\n  affiliateCode: {\r\n    type: String,\r\n    default: null,\r\n    // unique: true, // doesn't work with multiple \"null\" values :(\r\n  },\r\n\r\n  // User affiliation bonus amount\r\n  affiliateMoney: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much affiliation bonus has been claimed (withdrawn)\r\n  affiliateMoneyCollected: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  forgotExpires: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much rakeback has been collected\r\n  rakebackBalance: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Keep track of 50% deposit amount\r\n  // required by mitch :/\r\n  wagerNeededForWithdraw: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of deposits\r\n  totalDeposited: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of withdraws\r\n  totalWithdrawn: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User custom wager limit (for sponsors)\r\n  customWagerLimit: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User avatar last update\r\n  avatarLastUpdate: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // When user was created (registered)\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport interface IUserDocumentType {\r\n  provider: string;\r\n  providerId: string;\r\n  username: string;\r\n  password: string;\r\n  avatar: string;\r\n  rank: number;\r\n  wallet: number;\r\n  wager: number;\r\n  crypto: any; // Specify more detailed type if possible\r\n  hasVerifiedAccount: boolean;\r\n  verifiedPhoneNumber: string | null;\r\n  accountVerified: Date | null;\r\n  banExpires: string;\r\n  selfExcludes: {\r\n    crash: number;\r\n    jackpot: number;\r\n    coinflip: number;\r\n    roulette: number;\r\n  };\r\n  muteExpires: string;\r\n  transactionsLocked: boolean;\r\n  betsLocked: boolean;\r\n  _affiliatedBy: mongoose.Schema.Types.ObjectId | null;\r\n  affiliateClaimed: Date | null;\r\n  affiliateCode: string | null;\r\n  affiliateMoney: number;\r\n  affiliateMoneyCollected: number;\r\n  forgotToken: string | null;\r\n  forgotExpires: number;\r\n  rakebackBalance: number;\r\n  wagerNeededForWithdraw: number;\r\n  totalDeposited: number;\r\n  totalWithdrawn: number;\r\n  customWagerLimit: number;\r\n  avatarLastUpdate: number;\r\n  created: Date;\r\n}\r\n\r\n// Extend Document to include the User schema fields\r\nexport interface UserDocumentType extends Document, IUserDocumentType {}\r\n\r\n// Create and export the new model\r\nconst User = mongoose.model<UserDocumentType>('User', UserSchema);\r\n\r\nexport default User;\r\n","// Import Dependencies\r\nimport mongoose, { Document } from 'mongoose';\r\nconst { Schema, SchemaTypes } = mongoose;\r\n\r\n// Setup User Schema\r\nconst UseroSchema = new Schema({\r\n  // Authentication related fields\r\n  provider: String,\r\n  providerId: String,\r\n  username: String,\r\n  password: String,\r\n  avatar: String,\r\n\r\n  // User's on-site rank\r\n  rank: {\r\n    type: Number,\r\n    default: 1,\r\n    /**\r\n     * Ranks:\r\n     *\r\n     * 1 = User\r\n     * 2 = Sponsor\r\n     * 3 = Developer\r\n     * 4 = Moderator\r\n     * 5 = Admin\r\n     */\r\n  },\r\n\r\n  // Site balance\r\n  wallet: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Wager amount\r\n  wager: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Holds user's crypto address information (addresses)\r\n  crypto: Object,\r\n\r\n  // Whether the user has verified their account (via mobile phone or csgo loyalty badge) normal it is false\r\n  hasVerifiedAccount: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n\r\n  // Store their phone number to prevent multi-account verifications\r\n  verifiedPhoneNumber: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  // When the account was verified\r\n  accountVerified: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unix ms timestamp when the ban will end, 0 = no ban\r\n  banExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // Unix ms timestamps when the self-exclude will end, 0 = no ban\r\n  selfExcludes: {\r\n    crash: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    jackpot: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    coinflip: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    roulette: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n\r\n  // Unix ms timestamp when the mute will end, 0 = no mute\r\n  muteExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // If user has restricted transactions\r\n  transactionsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // If user has restricted bets\r\n  betsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // UserID of the user who affiliated\r\n  _affiliatedBy: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n\r\n  // When the affiliate was redeemed\r\n  affiliateClaimed: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unique affiliate code\r\n  affiliateCode: {\r\n    type: String,\r\n    default: null,\r\n    // unique: true, // doesn't work with multiple \"null\" values :(\r\n  },\r\n\r\n  // User affiliation bonus amount\r\n  affiliateMoney: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much affiliation bonus has been claimed (withdrawn)\r\n  affiliateMoneyCollected: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  forgotExpires: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much rakeback has been collected\r\n  rakebackBalance: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Keep track of 50% deposit amount\r\n  // required by mitch :/\r\n  wagerNeededForWithdraw: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of deposits\r\n  totalDeposited: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of withdraws\r\n  totalWithdrawn: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User custom wager limit (for sponsors)\r\n  customWagerLimit: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User avatar last update\r\n  avatarLastUpdate: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // When user was created (registered)\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport interface IUseroDocumentType extends Document {\r\n  provider: string;\r\n  providerId: string;\r\n  username: string;\r\n  password: string;\r\n  avatar: string;\r\n  rank: number;\r\n  wallet: number;\r\n  wager: number;\r\n  crypto: Record<string, any>;\r\n  hasVerifiedAccount: boolean;\r\n  verifiedPhoneNumber: string | null;\r\n  accountVerified: Date | null;\r\n  banExpires: string;\r\n  selfExcludes: {\r\n    crash: number;\r\n    jackpot: number;\r\n    coinflip: number;\r\n    roulette: number;\r\n  };\r\n  muteExpires: string;\r\n  transactionsLocked: boolean;\r\n  betsLocked: boolean;\r\n  _affiliatedBy: mongoose.Types.ObjectId | null;\r\n  affiliateClaimed: Date | null;\r\n  affiliateCode: string | null;\r\n  affiliateMoney: number;\r\n  affiliateMoneyCollected: number;\r\n  forgotToken: string | null;\r\n  forgotExpires: number;\r\n  rakebackBalance: number;\r\n  wagerNeededForWithdraw: number;\r\n  totalDeposited: number;\r\n  totalWithdrawn: number;\r\n  customWagerLimit: number;\r\n  avatarLastUpdate: number;\r\n  created: Date;\r\n}\r\n\r\nexport interface UseroDocumentType extends Document, IUseroDocumentType {}\r\n\r\n// Create and export the new model\r\nconst Usero = mongoose.model<UseroDocumentType>('Usero', UseroSchema);\r\n\r\nexport default Usero;\r\n","export const site = {\r\n  // Site configurations on server startup\r\n  enableMaintenanceOnStart: false,\r\n  manualWithdrawsEnabled: true,\r\n  enableLoginOnStart: true,\r\n  // Site endpoints\r\n  backend: {\r\n    productionUrl: '', //kujiracasino.com is virtual domain\r\n    developmentUrl: 'http://localhost:8080',\r\n  },\r\n  frontend: {\r\n    productionUrl: '', //localhost do http://localhost:3000 // else if you deploy it put \"https://kujiracasino.com\"\r\n    developmentUrl: 'http://localhost:3000',\r\n  },\r\n  adminFrontend: {\r\n    productionUrl: '',\r\n    developmentUrl: '',\r\n  },\r\n};\r\n\r\n// Each specific game configuration\r\nexport const database = {\r\n  developmentMongoURI: 'mongodb://127.0.0.1:27017/solcrash', // MongoURI to use in development\r\n  productionMongoURI: 'mongodb+srv://oliverb25f:FujiOka8-1225@cluster0.ughyjc0.mongodb.net/crash', // MongoURI to use in production\r\n};\r\n\r\nexport const games = {\r\n  exampleGame: {\r\n    minBetAmount: 1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.1, // House fee percentage\r\n  },\r\n  race: {\r\n    prizeDistribution: [40, 20, 14.5, 7, 5.5, 4.5, 3.5, 2.5, 1.5, 1], // How is the prize distributed (place = index + 1)\r\n  },\r\n  vip: {\r\n    minDepositForWithdraw: 5, // You must have deposited atleast this amount before withdrawing\r\n    minWithdrawAmount: 5, // Minimum Withdraw Amount\r\n    levelToChat: 2, // The level amount you need to chat\r\n    levelToTip: 15, // The level to use the tip feature in chat\r\n    levelToRain: 10, // The level amount to start a rain\r\n    wagerToJoinRain: 5, // The wager amount to join the rain in chat\r\n    minRakebackClaim: 2, // The min rakeback amount you need to claim rakeback\r\n    numLevels: 500, // Number of total levels\r\n    minWager: 0, // minWager\r\n    maxWager: 502007, // maxWager\r\n    rakeback: 21.66, // Max rakeback\r\n    vipLevelNAME: ['Beginner', 'Professional', 'Expert', 'Crown'],\r\n    vipLevelCOLORS: ['rgb(215, 117, 88)', 'rgb(71, 190, 219)', 'rgb(96, 183, 100)', 'rgb(152, 38, 38)'],\r\n  },\r\n  affiliates: {\r\n    earningPercentage: 10, // How many percentage of house edge the affiliator will get\r\n  },\r\n  coinflip: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.05, // House fee percentage\r\n  },\r\n  crash: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100, // Max bet amount (in coins)\r\n    maxProfit: 500, // Max profit on crash, forces auto cashout\r\n    houseEdge: 0.05, // House edge percentage\r\n  },\r\n};\r\n\r\nexport const blochain = {\r\n  // EOS Blockchain provider API root url\r\n  // without following slashes\r\n  httpProviderApi: 'http://eos.greymass.com',\r\n};\r\n\r\nexport const authentication = {\r\n  jwtSecret: 'vf4Boy2WT1bVgphxFqjEY2GjciChkXvf4Boy2WT1hkXv2', // Secret used to sign JWT's. KEEP THIS AS A SECRET 45 length\r\n  jwtExpirationTime: 360000, // JWT-token expiration time (in seconds)\r\n  revenueId: '65ab8f6ed19ce703808382b2',\r\n};\r\n"],"mappings":"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","names":["mongoose","import_mongoose","Schema","mongoose"]}