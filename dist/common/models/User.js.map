{"version":3,"sources":["../../../src/common/models/User.ts"],"sourcesContent":["// Import Dependencies\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\n// Destructure Schema Types\r\nconst { Schema, Types } = mongoose;\r\n\r\n// Setup User Schema\r\nconst UserSchema = new Schema({\r\n  // Authentication related fields\r\n  provider: String,\r\n  providerId: String,\r\n  username: String,\r\n  password: String,\r\n  avatar: String,\r\n\r\n  // User's on-site rank\r\n  rank: {\r\n    type: Number,\r\n    default: 1,\r\n    /**\r\n     * Ranks:\r\n     *\r\n     * 1 = User\r\n     * 2 = Sponsor\r\n     * 3 = Developer\r\n     * 4 = Moderator\r\n     * 5 = Admin\r\n     */\r\n  },\r\n\r\n  // Site balance\r\n  wallet: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Wager amount\r\n  wager: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Holds user's crypto address information (addresses)\r\n  crypto: Object,\r\n\r\n  // Whether the user has verified their account (via mobile phone or csgo loyalty badge) normal it is false\r\n  hasVerifiedAccount: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n\r\n  // Store their phone number to prevent multi-account verifications\r\n  verifiedPhoneNumber: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  // When the account was verified\r\n  accountVerified: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unix ms timestamp when the ban will end, 0 = no ban\r\n  banExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // Unix ms timestamps when the self-exclude will end, 0 = no ban\r\n  selfExcludes: {\r\n    crash: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    jackpot: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    coinflip: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    roulette: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n\r\n  // Unix ms timestamp when the mute will end, 0 = no mute\r\n  muteExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // If user has restricted transactions\r\n  transactionsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // If user has restricted bets\r\n  betsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // UserID of the user who affiliated\r\n  _affiliatedBy: {\r\n    type: Types.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n\r\n  // When the affiliate was redeemed\r\n  affiliateClaimed: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unique affiliate code\r\n  affiliateCode: {\r\n    type: String,\r\n    default: null,\r\n    // unique: true, // doesn't work with multiple \"null\" values :(\r\n  },\r\n\r\n  // User affiliation bonus amount\r\n  affiliateMoney: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much affiliation bonus has been claimed (withdrawn)\r\n  affiliateMoneyCollected: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  forgotExpires: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much rakeback has been collected\r\n  rakebackBalance: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Keep track of 50% deposit amount\r\n  // required by mitch :/\r\n  wagerNeededForWithdraw: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of deposits\r\n  totalDeposited: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of withdraws\r\n  totalWithdrawn: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User custom wager limit (for sponsors)\r\n  customWagerLimit: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User avatar last update\r\n  avatarLastUpdate: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // When user was created (registered)\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport interface IUserDocumentType {\r\n  provider: string;\r\n  providerId: string;\r\n  username: string;\r\n  password: string;\r\n  avatar: string;\r\n  rank: number;\r\n  wallet: number;\r\n  wager: number;\r\n  crypto: any; // Specify more detailed type if possible\r\n  hasVerifiedAccount: boolean;\r\n  verifiedPhoneNumber: string | null;\r\n  accountVerified: Date | null;\r\n  banExpires: string;\r\n  selfExcludes: {\r\n    crash: number;\r\n    jackpot: number;\r\n    coinflip: number;\r\n    roulette: number;\r\n  };\r\n  muteExpires: string;\r\n  transactionsLocked: boolean;\r\n  betsLocked: boolean;\r\n  _affiliatedBy: mongoose.Schema.Types.ObjectId | null;\r\n  affiliateClaimed: Date | null;\r\n  affiliateCode: string | null;\r\n  affiliateMoney: number;\r\n  affiliateMoneyCollected: number;\r\n  forgotToken: string | null;\r\n  forgotExpires: number;\r\n  rakebackBalance: number;\r\n  wagerNeededForWithdraw: number;\r\n  totalDeposited: number;\r\n  totalWithdrawn: number;\r\n  customWagerLimit: number;\r\n  avatarLastUpdate: number;\r\n  created: Date;\r\n}\r\n\r\n// Extend Document to include the User schema fields\r\nexport interface UserDocumentType extends Document, IUserDocumentType {}\r\n\r\n// Create and export the new model\r\nconst User = mongoose.model<UserDocumentType>('User', UserSchema);\r\n\r\nexport default User;\r\n"],"mappings":"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","names":["mongoose"]}