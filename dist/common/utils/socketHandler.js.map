{"version":3,"sources":["../../../src/common/utils/socketHandler.ts","../../../src/api/crash/crash.ts","../../../src/controllers/throttler.ts","../../../src/config/index.ts","../../../src/controllers/random.ts","../../../src/controllers/blockchain.ts","../../../src/common/models/Race.ts","../../../src/common/models/RaceEntry.ts","../../../src/common/models/User.ts","../../../src/common/models/Usero.ts","../../../src/controllers/vip.ts","../../../src/controllers/race.ts","../../../src/controllers/affiliates.ts","../../../src/controllers/site-settings.ts","../../../src/common/models/WalletTransaction.ts","../../../src/common/utils/insertNewWalletTransaction.ts","../../../src/common/models/CrashGame.ts","../../../src/common/models/RevenueLog.ts"],"sourcesContent":["import http from 'http';\r\nimport { logger } from '@/server';\r\nimport { Server } from 'socket.io';\r\nimport type { Express } from 'express';\r\nimport type { ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData } from '@/common/types';\r\n\r\nimport * as crashController from '@/api/crash/crash';\r\n\r\n// Configure Socket.io\r\nconst startSocketServer = (httpServer: http.Server, app: Express) => {\r\n  try {\r\n    // Main socket.io instance\r\n    const io = new Server<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>(httpServer, {\r\n      cors: { origin: '*', methods: ['GET', 'POST'] },\r\n    });\r\n\r\n    // Make the socket connection accessible at the routes\r\n    app.set('socketio', io);\r\n\r\n    io.on('connection', (socket) => {\r\n      console.log('a user connected');\r\n      socket.emit('noArg');\r\n      socket.emit('basicEmit', 1, '2', Buffer.from([3]));\r\n      socket.emit('withAck', '4', (e) => {\r\n        // e is inferred as number\r\n      });\r\n\r\n      // works when broadcast to all\r\n      io.emit('noArg');\r\n\r\n      // works when broadcasting to a room\r\n      io.to('room1').emit('basicEmit', 1, '2', Buffer.from([3]));\r\n    });\r\n\r\n    // Start listeners\r\n    crashController.listen(io);\r\n    // exampleController.listen(io);\r\n\r\n    console.log('WebSocket >>', 'Connected!');\r\n  } catch (error: any) {\r\n    console.log(`WebSocket ERROR >> ${error.message}`);\r\n\r\n    // Exit current process with failure\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Export functions\r\nexport { startSocketServer };\r\n","// Require Dependencies\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\nimport { parallelLimit, someLimit } from 'async';\r\nimport _ from 'lodash';\r\nimport throttlerController from '@/controllers/throttler';\r\nimport { games, authentication } from '@/config/index';\r\nimport colors from 'colors';\r\nimport { generatePrivateSeedHashPair, generateCrashRandom } from '@/controllers/random';\r\nimport { checkAndEnterRace, checkAndApplyRakeToRace } from '@/controllers/race';\r\nimport { checkAndApplyRakeback, getVipLevelFromWager } from '@/controllers/vip';\r\nimport { checkAndApplyAffiliatorCut } from '@/controllers/affiliates';\r\nimport { getCrashState } from '@/controllers/site-settings';\r\nimport insertNewWalletTransaction from '@/common/utils/insertNewWalletTransaction';\r\nimport type { Server, Socket } from 'socket.io';\r\n\r\nimport User from '@/common/models/User';\r\nimport CrashGame, { CrashGameDocument } from '@/common/models/CrashGame';\r\n\r\nimport Usero, { UseroDocumentType } from '@/common/models/Usero';\r\nimport { UserDocumentType } from '@/common/models/User';\r\nimport RevenueLog from '@/common/models/RevenueLog';\r\n\r\nimport {\r\n  GameStateType,\r\n  BetType,\r\n  PendingBetType,\r\n  FormattedGameHistoryType,\r\n  FormattedPlayerBetType,\r\n} from '@/common/types';\r\nimport type { ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData } from '@/common/types';\r\nimport { number } from 'zod';\r\n\r\ntype FormattedGameStateType = Pick<GameStateType, '_id' | 'status' | 'startedAt' | 'privateHash' | 'publicSeed'> & {\r\n  elapsed: number;\r\n  crashPoint?: number;\r\n  players: FormattedPlayerBetType[];\r\n};\r\n\r\ninterface UpdateParamType {\r\n  $set: {\r\n    [key: string]: BetType;\r\n  };\r\n}\r\n\r\n// Declare durations for game\r\nconst TICK_RATE = 150;\r\nconst START_WAIT_TIME = 4000;\r\nconst RESTART_WAIT_TIME = 9000;\r\n\r\n// Declare growth functions\r\nconst growthFunc = (ms: number) => Math.floor(100 * Math.pow(Math.E, 0.00006 * ms));\r\nconst inverseGrowth = (result: number) => 16666.666667 * Math.log(0.01 * result);\r\n\r\n// Declare game states\r\nconst GAME_STATES = {\r\n  NotStarted: 1,\r\n  Starting: 2,\r\n  InProgress: 3,\r\n  Over: 4,\r\n  Blocking: 5,\r\n  Refunded: 6,\r\n};\r\n\r\nconst BET_STATES = {\r\n  Playing: 1,\r\n  CashedOut: 2,\r\n};\r\n\r\n// Declare game state\r\nconst GAME_STATE: GameStateType = {\r\n  _id: null,\r\n  status: GAME_STATES.Starting,\r\n  crashPoint: null,\r\n  startedAt: null,\r\n  duration: null,\r\n  players: {},\r\n  pending: {},\r\n  pendingCount: 0,\r\n  pendingBets: [],\r\n  privateSeed: null,\r\n  privateHash: null,\r\n  publicSeed: null,\r\n};\r\n\r\n// Export state to external controllers\r\nconst getCurrentGame = () => formatGame(GAME_STATE);\r\nconst getPrivateHash = () => GAME_STATE.privateSeed;\r\n\r\n// Format a game\r\nconst formatGame = (game: GameStateType) => {\r\n  const formatted: FormattedGameStateType = {\r\n    _id: game._id,\r\n    status: game.status,\r\n    startedAt: game.startedAt,\r\n    elapsed: Date.now() - game.startedAt!.getTime(),\r\n    players: _.map(game.players, (p) => formatPlayerBet(p)),\r\n    privateHash: game.privateHash,\r\n    publicSeed: game.publicSeed,\r\n  };\r\n\r\n  if (game.status === GAME_STATES.Over && game.crashPoint) {\r\n    formatted.crashPoint = game.crashPoint;\r\n  }\r\n\r\n  return formatted;\r\n};\r\n\r\n// Format a game history\r\nconst formatGameHistory = (game: GameStateType): FormattedGameHistoryType => {\r\n  const formatted = {\r\n    _id: game._id,\r\n    createdAt: game.createdAt,\r\n    privateHash: game.privateHash,\r\n    privateSeed: game.privateSeed,\r\n    publicSeed: game.publicSeed,\r\n    crashPoint: game.crashPoint! / 100,\r\n  };\r\n\r\n  return formatted;\r\n};\r\n\r\n// Format a player bet\r\nconst formatPlayerBet = (bet: BetType): FormattedPlayerBetType => {\r\n  const formatted: FormattedPlayerBetType = {\r\n    playerID: bet.playerID,\r\n    username: bet.username,\r\n    avatar: bet.avatar,\r\n    betAmount: bet.betAmount,\r\n    status: bet.status,\r\n    level: bet.level,\r\n  };\r\n\r\n  if (bet.status !== BET_STATES.Playing) {\r\n    formatted.stoppedAt = bet.stoppedAt;\r\n    formatted.winningAmount = bet.winningAmount;\r\n  }\r\n\r\n  return formatted;\r\n};\r\n\r\n// Calculate the current game payout\r\nconst calculateGamePayout = (ms: number): number => {\r\n  const gamePayout = Math.floor(100 * growthFunc(ms)) / 100;\r\n  return Math.max(gamePayout, 1);\r\n};\r\n\r\n// Get all game history\r\nconst getGameHistory = async (limit?: number) => {\r\n  try {\r\n    return await CrashGame.aggregate([\r\n      {\r\n        $match: {\r\n          status: GAME_STATES.Over,\r\n        },\r\n      },\r\n      { $sort: { createdAt: -1 } },\r\n      {\r\n        $limit: limit ? limit : 20,\r\n      },\r\n    ]);\r\n  } catch (e) {\r\n    console.error(e);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get socket.io instance\r\nconst listen = (io: Server<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>) => {\r\n  // Function to emit new player bets\r\n  const _emitPendingBets = () => {\r\n    const bets = GAME_STATE.pendingBets;\r\n    GAME_STATE.pendingBets = [];\r\n\r\n    io.of('/crash').emit('game-bets', bets);\r\n  };\r\n\r\n  const emitPlayerBets = _.throttle(_emitPendingBets, 600);\r\n\r\n  // Creates a new game\r\n  const createNewGame = (): Promise<CrashGameDocument> => {\r\n    return new Promise<CrashGameDocument>(async (resolve, reject) => {\r\n      try {\r\n        // Generate pre-roll provably fair data\r\n        const provablyData = await generatePrivateSeedHashPair();\r\n\r\n        // Push game to db\r\n        const newGame = new CrashGame({\r\n          privateSeed: provablyData.seed,\r\n          privateHash: provablyData.hash,\r\n          players: {},\r\n          status: GAME_STATES.Starting,\r\n        });\r\n\r\n        // Save the new document\r\n        await newGame.save();\r\n\r\n        console.log(colors.cyan('Crash >> Generated new game with the id'), newGame._id);\r\n\r\n        resolve(newGame);\r\n      } catch (error) {\r\n        console.log(colors.cyan(`Crash >> Couldn't create a new game ${error}`));\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Starts a new game\r\n  const runGame = async () => {\r\n    const game = await createNewGame();\r\n\r\n    // Override local state\r\n    GAME_STATE._id = game._id!.toString();\r\n    GAME_STATE.status = GAME_STATES.Starting;\r\n    GAME_STATE.privateSeed = game.privateSeed!;\r\n    GAME_STATE.privateHash = game.privateHash!;\r\n    GAME_STATE.publicSeed = null;\r\n    GAME_STATE.startedAt = new Date(Date.now() + RESTART_WAIT_TIME);\r\n    GAME_STATE.players = {};\r\n\r\n    // Update startedAt in db\r\n    game.startedAt = GAME_STATE.startedAt;\r\n\r\n    await game.save();\r\n\r\n    // Function to get a random subset of an array\r\n    const getRandomSubset = (array: Array<UseroDocumentType>, subsetSize: number): Array<UseroDocumentType> => {\r\n      const shuffledArray = array.sort(() => 0.5 - Math.random());\r\n      return shuffledArray.slice(0, subsetSize);\r\n    };\r\n\r\n    // Function to generate a random bet amount between 0.1 and 120.2\r\n    const getRandomBetAmount = () => {\r\n      const randomNumber = Math.random();\r\n      let betAmount;\r\n\r\n      if (randomNumber <= 0.95) {\r\n        // 95% chance for bets between 0.1 and 8\r\n        if (Math.random() <= 0.65) {\r\n          // 65% chance for bets without decimals (full numbers)\r\n          betAmount = Math.floor(Math.random() * 8) + 1; // Generates a random integer between 1 and 8 (inclusive)\r\n        } else {\r\n          // 35% chance for bets with decimals\r\n          betAmount = Math.random() * (8 - 0.1) + 0.1; // Generates a random decimal number between 0.1 and 8\r\n        }\r\n      } else {\r\n        // 5% chance for bets between 8 and 120.2\r\n        if (Math.random() <= 0.65) {\r\n          // 65% chance for bets without decimals (full numbers)\r\n          betAmount = Math.floor(Math.random() * (120.2 - 8)) + 8; // Generates a random integer number between 8 and 120.2\r\n        } else {\r\n          // 35% chance for bets with decimals\r\n          betAmount = Math.random() * (120.2 - 8) + 8; // Generates a random decimal number between 8 and 120.2\r\n        }\r\n      }\r\n\r\n      return parseFloat(betAmount.toFixed(2));\r\n    };\r\n\r\n    try {\r\n      // Get a random subset of players\r\n      const allPlayers = await Usero.find({});\r\n      const randomNumberOfPlayers = Math.floor(Math.random() * 4) + 8;\r\n      const selectedPlayers = getRandomSubset(allPlayers, randomNumberOfPlayers);\r\n\r\n      // Fake players joining\r\n      selectedPlayers.forEach((fakeUser, index) => {\r\n        const { username, avatar, wager, _id } = fakeUser;\r\n        const betAmount = getRandomBetAmount();\r\n        const delay = Math.floor(Math.random() * 7 + 2) * 1000; // Generate a random delay between 2-8 seconds\r\n        function generateRandomNumber() {\r\n          const min = 105;\r\n          const max = 2000;\r\n\r\n          // Generate a random number between 0 and 1\r\n          const random = Math.random();\r\n\r\n          let randomNumber;\r\n\r\n          if (random < 0.3) {\r\n            // 30% chance of a number below 150\r\n            randomNumber = min + Math.random() * (150 - min);\r\n          } else if (random < 0.5) {\r\n            // 20% chance of a number below 200\r\n            randomNumber = min + Math.random() * (200 - min);\r\n          } else if (random < 0.7) {\r\n            // 20% chance of a number below 300\r\n            randomNumber = min + Math.random() * (300 - min);\r\n          } else {\r\n            // Remaining 30% can be any value below 2000\r\n            randomNumber = min + Math.random() * (max - min);\r\n          }\r\n\r\n          return randomNumber;\r\n        }\r\n\r\n        setTimeout(async () => {\r\n          const CASHOUTNUMBER = generateRandomNumber();\r\n          GAME_STATE.pending[String(_id)] = {\r\n            betAmount,\r\n            autoCashOut: CASHOUTNUMBER,\r\n            username: username,\r\n          };\r\n\r\n          GAME_STATE.pendingCount++;\r\n\r\n          // Creating new bet object\r\n          const newBet: BetType = {\r\n            autoCashOut: CASHOUTNUMBER,\r\n            betAmount,\r\n            createdAt: new Date(),\r\n            playerID: String(_id),\r\n            username: username,\r\n            avatar: avatar,\r\n            level: getVipLevelFromWager(wager),\r\n            status: BET_STATES.Playing,\r\n            forcedCashout: true,\r\n          };\r\n\r\n          // Remove bet amount from user's balance\r\n          await Usero.updateOne(\r\n            { _id: _id },\r\n            {\r\n              $inc: {\r\n                wager: Math.abs(parseFloat(betAmount.toFixed(2))),\r\n              },\r\n            }\r\n          );\r\n\r\n          await checkAndEnterRace(String(_id), Math.abs(parseFloat(betAmount.toFixed(2))));\r\n\r\n          // Updating in db\r\n          const updateParam: UpdateParamType = { $set: {} };\r\n          updateParam.$set['players.' + _id] = newBet;\r\n          await CrashGame.updateOne({ _id: GAME_STATE._id }, updateParam);\r\n\r\n          // Assign to state\r\n          GAME_STATE.players[String(_id)] = newBet;\r\n          GAME_STATE.pendingCount--;\r\n\r\n          const formattedBet = formatPlayerBet(newBet);\r\n          GAME_STATE.pendingBets.push(formattedBet);\r\n          return emitPlayerBets();\r\n\r\n          //console.log(`Player ${username} joined with a delay of ${delay / 1000} seconds`);\r\n        }, delay);\r\n      });\r\n    } catch (error) {\r\n      console.log('ERROR Crash', error);\r\n      // delete GAME_STATE.pending[_id];                ?? no _id\r\n      GAME_STATE.pendingCount--;\r\n    }\r\n\r\n    emitStarting();\r\n  };\r\n\r\n  // Emits the start of the game and handles blocking\r\n  const emitStarting = () => {\r\n    // Emiting starting to clients\r\n    io.of('/crash').emit('game-starting', {\r\n      _id: GAME_STATE._id,\r\n      privateHash: GAME_STATE.privateHash,\r\n      timeUntilStart: RESTART_WAIT_TIME,\r\n    });\r\n\r\n    setTimeout(blockGame, RESTART_WAIT_TIME - 500);\r\n  };\r\n\r\n  // Block games for more bets\r\n  const blockGame = () => {\r\n    GAME_STATE.status = GAME_STATES.Blocking;\r\n\r\n    const loop = (): NodeJS.Timeout => {\r\n      const ids: string[] = Object.keys(GAME_STATE.pending);\r\n      if (GAME_STATE.pendingCount > 0) {\r\n        console.log(colors.cyan(`Crash >> Delaying game while waiting for ${ids.length} (${ids.join(', ')}) join(s)`));\r\n        return setTimeout(loop, 50);\r\n      }\r\n\r\n      startGame();\r\n      return null as any; // To ensure return type consistency, though `startGame` should ideally be typed as `void`\r\n    };\r\n\r\n    loop();\r\n  };\r\n\r\n  // Starting animation and enabling cashouts\r\n  const startGame = async () => {\r\n    try {\r\n      // Generate random data\r\n      const randomData = await generateCrashRandom(GAME_STATE.privateSeed!);\r\n\r\n      // Overriding game state\r\n      GAME_STATE.status = GAME_STATES.InProgress;\r\n      GAME_STATE.crashPoint = randomData.crashPoint;\r\n      GAME_STATE.publicSeed = randomData.publicSeed;\r\n      GAME_STATE.duration = Math.ceil(inverseGrowth(GAME_STATE.crashPoint + 1));\r\n      GAME_STATE.startedAt = new Date();\r\n      GAME_STATE.pending = {};\r\n      GAME_STATE.pendingCount = 0;\r\n\r\n      console.log(\r\n        colors.cyan('Crash >> Starting new game'),\r\n        GAME_STATE._id,\r\n        colors.cyan('with crash point'),\r\n        GAME_STATE.crashPoint / 100\r\n      );\r\n\r\n      // Updating in db\r\n      await CrashGame.updateOne(\r\n        { _id: GAME_STATE._id },\r\n        {\r\n          status: GAME_STATES.InProgress,\r\n          crashPoint: GAME_STATE.crashPoint,\r\n          publicSeed: GAME_STATE.publicSeed,\r\n          startedAt: GAME_STATE.startedAt,\r\n        }\r\n      );\r\n\r\n      // Emiting start to clients\r\n      io.of('/crash').emit('game-start', {\r\n        publicSeed: GAME_STATE.publicSeed,\r\n      });\r\n\r\n      callTick(0);\r\n    } catch (error) {\r\n      console.log('Error while starting a crash game:', error);\r\n\r\n      // Notify clients that we had an error\r\n      io.of('/crash').emit('notify-error', \"Our server couldn't connect to EOS Blockchain, retrying in 15s\");\r\n\r\n      // Timeout to retry\r\n      const timeout: NodeJS.Timeout = setTimeout(() => {\r\n        // Retry starting the game\r\n        startGame();\r\n\r\n        clearTimeout(timeout);\r\n      }, 15000);\r\n    }\r\n  };\r\n\r\n  // Calculate next tick time\r\n  const callTick = (elapsed: number) => {\r\n    // Calculate next tick\r\n    const left = GAME_STATE.duration! - elapsed;\r\n    const nextTick = Math.max(0, Math.min(left, TICK_RATE));\r\n\r\n    setTimeout(runTick, nextTick);\r\n  };\r\n\r\n  // Run the current tick\r\n  const runTick = () => {\r\n    // Calculate elapsed time\r\n    const elapsed = Date.now() - GAME_STATE.startedAt!.getTime();\r\n    const at = growthFunc(elapsed);\r\n\r\n    // Completing all auto cashouts\r\n    runCashOuts(at);\r\n\r\n    // Check if crash point is reached\r\n    if (at > GAME_STATE.crashPoint!) {\r\n      endGame();\r\n    } else {\r\n      tick(elapsed);\r\n    }\r\n  };\r\n\r\n  // Handles auto cashout for users\r\n  const runCashOuts = (elapsed: number) => {\r\n    _.each(GAME_STATE.players, (bet) => {\r\n      // Check if bet is still active\r\n      if (bet.status !== BET_STATES.Playing) return;\r\n\r\n      // Check if the auto cashout is reached or max profit is reached\r\n      if (bet.autoCashOut >= 101 && bet.autoCashOut <= elapsed && bet.autoCashOut <= GAME_STATE.crashPoint!) {\r\n        doCashOut(bet.playerID, bet.autoCashOut, false, (err: Error | null) => {\r\n          if (err) {\r\n            console.log(colors.cyan(`Crash >> There was an error while trying to cashout`), err);\r\n          }\r\n        });\r\n      } else if (bet.betAmount * (elapsed / 100) >= games.crash.maxProfit && elapsed <= GAME_STATE.crashPoint!) {\r\n        doCashOut(bet.playerID, elapsed, true, (err: Error | null) => {\r\n          if (err) {\r\n            console.log(colors.cyan(`Crash >> There was an error while trying to cashout`), err);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Handle cashout request\r\n  const doCashOut = async (\r\n    playerID: string,\r\n    elapsed: number,\r\n    forced: boolean,\r\n    cb: (err: Error | null, result?: any) => void\r\n  ) => {\r\n    //console.log(colors.cyan(\"Crash >> Doing cashout for\"), playerID);\r\n\r\n    // Check if bet is still active\r\n    if (GAME_STATE.players[playerID].status !== BET_STATES.Playing) return;\r\n\r\n    // Update player state\r\n    GAME_STATE.players[playerID].status = BET_STATES.CashedOut;\r\n    GAME_STATE.players[playerID].stoppedAt = elapsed;\r\n    if (forced) GAME_STATE.players[playerID].forcedCashout = true;\r\n\r\n    const bet = GAME_STATE.players[playerID];\r\n\r\n    // Calculate winning amount\r\n    let winningAmount = 0;\r\n    if (bet.autoCashOut !== undefined && bet.stoppedAt !== undefined) {\r\n      winningAmount = parseFloat(\r\n        (bet.betAmount * ((bet.autoCashOut === bet.stoppedAt ? bet.autoCashOut : bet.stoppedAt) / 100)).toFixed(2)\r\n      );\r\n    } else {\r\n      console.error('Error: autoCashOut or stoppedAt is undefined.');\r\n    }\r\n\r\n    const houseAmount = winningAmount * games.crash.houseEdge;\r\n    winningAmount *= 1 - games.crash.houseEdge;\r\n\r\n    console.log('winningAmount', winningAmount);\r\n\r\n    GAME_STATE.players[playerID].winningAmount = winningAmount;\r\n\r\n    if (cb) cb(null, GAME_STATE.players[playerID]);\r\n\r\n    const { status, stoppedAt } = GAME_STATE.players[playerID];\r\n\r\n    // Emiting cashout to clients\r\n    io.of('/crash').emit('bet-cashout', {\r\n      playerID,\r\n      status,\r\n      stoppedAt,\r\n      winningAmount,\r\n    });\r\n\r\n    // Giving winning balance to user\r\n    await User.updateOne(\r\n      { _id: playerID },\r\n      {\r\n        $inc: {\r\n          wallet: Math.abs(winningAmount),\r\n        },\r\n      }\r\n    );\r\n\r\n    // Add revenue to the site wallet\r\n    await User.updateOne(\r\n      {\r\n        _id: authentication.revenueId,\r\n      },\r\n      {\r\n        $inc: {\r\n          wallet: houseAmount,\r\n        },\r\n      }\r\n    );\r\n\r\n    const siteuser = await User.findById(authentication.revenueId);\r\n    // revenue log\r\n    const newLog = new RevenueLog({\r\n      userid: playerID,\r\n      // Revenue type 4: coinflip, 3: jackpot, 1: roulette, 2: crash\r\n      revenueType: 2,\r\n      // Balance\r\n      revenue: houseAmount,\r\n      lastBalance: siteuser!.wallet,\r\n    });\r\n\r\n    await newLog.save();\r\n\r\n    insertNewWalletTransaction(playerID, Math.abs(winningAmount), 'Crash win', {\r\n      crashGameId: GAME_STATE._id,\r\n    });\r\n\r\n    // Update local wallet\r\n    io.of('/crash').to(playerID).emit('update-wallet', Math.abs(winningAmount));\r\n\r\n    // Updating in db\r\n    const updateParam: UpdateParamType = { $set: {} };\r\n    updateParam.$set['players.' + playerID] = GAME_STATE.players[playerID];\r\n    await CrashGame.updateOne({ _id: GAME_STATE._id }, updateParam);\r\n  };\r\n\r\n  // Handle end request\r\n  const endGame = async () => {\r\n    console.log(colors.cyan(`Crash >> Ending game at`), GAME_STATE.crashPoint! / 100);\r\n\r\n    const crashTime = Date.now();\r\n\r\n    GAME_STATE.status = GAME_STATES.Over;\r\n\r\n    // Notify clients\r\n    io.of('/crash').emit('game-end', {\r\n      game: formatGameHistory(GAME_STATE),\r\n    });\r\n\r\n    // Run new game after start wait time\r\n    setTimeout(\r\n      () => {\r\n        runGame();\r\n      },\r\n      crashTime + START_WAIT_TIME - Date.now()\r\n    );\r\n\r\n    // Updating in db\r\n    await CrashGame.updateOne(\r\n      { _id: GAME_STATE._id },\r\n      {\r\n        status: GAME_STATES.Over,\r\n      }\r\n    );\r\n  };\r\n\r\n  // Emits game tick to client\r\n  const tick = (elapsed: number) => {\r\n    io.of('/crash').emit('game-tick', calculateGamePayout(elapsed) / 100);\r\n    callTick(elapsed);\r\n  };\r\n\r\n  // Handle refunds of old unfinished games\r\n  const refundGames = async (games: CrashGameDocument[]) => {\r\n    for (let game of games) {\r\n      console.log(colors.cyan(`Crash >> Refunding game`), game._id);\r\n\r\n      const refundedPlayers = [];\r\n\r\n      try {\r\n        for (let playerID in game.players) {\r\n          const bet = game.players[playerID];\r\n\r\n          if (bet.status == BET_STATES.Playing) {\r\n            // Push Player ID to the refunded players\r\n            refundedPlayers.push(playerID);\r\n\r\n            console.log(colors.cyan(`Crash >> Refunding player ${playerID} for ${bet.betAmount}`));\r\n\r\n            // Refund player\r\n            await User.updateOne(\r\n              { _id: playerID },\r\n              {\r\n                $inc: {\r\n                  wallet: Math.abs(bet.betAmount),\r\n                },\r\n              }\r\n            );\r\n            insertNewWalletTransaction(playerID, Math.abs(bet.betAmount), 'Crash refund', { crashGameId: game._id });\r\n          }\r\n        }\r\n\r\n        game.refundedPlayers = refundedPlayers;\r\n        game.status = GAME_STATES.Refunded;\r\n        await game.save();\r\n      } catch (error) {\r\n        console.log(colors.cyan(`Crash >> Error while refunding crash game ${GAME_STATE._id}: ${error}`));\r\n      }\r\n    }\r\n  };\r\n\r\n  // Refunds old unfinished games and inits new one\r\n  const initGame = async () => {\r\n    console.log(colors.cyan('Crash >> Starting up'));\r\n\r\n    const unfinishedGames = await CrashGame.find({\r\n      $or: [{ status: GAME_STATES.Starting }, { status: GAME_STATES.Blocking }, { status: GAME_STATES.InProgress }],\r\n    });\r\n\r\n    if (unfinishedGames.length > 0) {\r\n      console.log(colors.cyan(`Crash >> Ending`), unfinishedGames.length, colors.cyan(`unfinished games`));\r\n      await refundGames(unfinishedGames);\r\n    }\r\n\r\n    runGame();\r\n  };\r\n\r\n  // Init the gamemode\r\n  initGame();\r\n\r\n  // Listen for new websocket connections\r\n  io.of('/crash').on(\r\n    'connection',\r\n    (socket: Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>) => {\r\n      let loggedIn = false;\r\n      let user: UserDocumentType | null = null;\r\n\r\n      // Throttle connnections\r\n      socket.use(throttlerController(socket));\r\n\r\n      // Authenticate websocket connection\r\n      socket.on('auth', async (token: string) => {\r\n        if (!token) {\r\n          loggedIn = false;\r\n          user = null;\r\n          return socket.emit('error', 'No authentication token provided, authorization declined');\r\n        }\r\n\r\n        try {\r\n          // Verify token\r\n          const decoded = jwt.verify(token, authentication.jwtSecret) as JwtPayload;\r\n\r\n          user = await User.findOne({ _id: decoded.user.id });\r\n\r\n          if (user) {\r\n            if (parseInt(user.banExpires) > new Date().getTime()) {\r\n              loggedIn = false;\r\n              user = null;\r\n              return socket.emit('user banned');\r\n            } else {\r\n              loggedIn = true;\r\n              socket.join(String(user._id));\r\n              // socket.emit(\"notify-success\", \"Successfully authenticated!\");\r\n            }\r\n          }\r\n          // return socket.emit(\"alert success\", \"Socket Authenticated!\");\r\n        } catch (error) {\r\n          loggedIn = false;\r\n          console.log('error handle', error);\r\n          user = null;\r\n          return socket.emit('notify-error', 'Authentication token is not valid');\r\n        }\r\n      });\r\n\r\n      // Check for users ban status\r\n      socket.use(async (packet, next) => {\r\n        if (loggedIn && user) {\r\n          try {\r\n            const dbUser = await User.findOne({ _id: user.id });\r\n\r\n            // Check if user is banned\r\n            if (dbUser && parseInt(dbUser.banExpires) > new Date().getTime()) {\r\n              return socket.emit('user banned');\r\n            } else {\r\n              return next();\r\n            }\r\n          } catch (error) {\r\n            return socket.emit('user banned');\r\n          }\r\n        } else {\r\n          return next();\r\n        }\r\n      });\r\n\r\n      /**\r\n       * @description Get previous history\r\n       *\r\n       * @param {number} limit Limit amount\r\n       */\r\n      socket.on('previous-crashgame-history', async (limit: number) => {\r\n        // Validate user input\r\n        if (typeof limit !== 'number' || isNaN(limit))\r\n          return socket.emit('get-crashgame-history-error', 'Invalid limit type!');\r\n\r\n        const histories = await getGameHistory(limit);\r\n\r\n        return socket.emit('previous-crashgame-history-response', histories);\r\n      });\r\n\r\n      /**\r\n       * @description Join a current game\r\n       *\r\n       * @param {number} target Auto cashout target\r\n       * @param {number} betAmount Bet amount\r\n       */\r\n      socket.on('join-game', async (target: number, betAmount: number) => {\r\n        // Validate user input\r\n        if (typeof betAmount !== 'number' || isNaN(betAmount))\r\n          return socket.emit('game-join-error', 'Invalid betAmount type!');\r\n        if (!loggedIn) {\r\n          return socket.emit('game-join-error', 'You are not logged in!');\r\n        }\r\n\r\n        // Get crash enabled status\r\n        const isEnabled = getCrashState();\r\n\r\n        // If crash is disabled\r\n        if (!isEnabled) {\r\n          return socket.emit('game-join-error', 'Crash is currently disabled! Contact admins for more information.');\r\n        }\r\n\r\n        // More validation on the bet value\r\n        const { minBetAmount, maxBetAmount } = games.crash;\r\n        if (parseFloat(betAmount.toFixed(2)) < minBetAmount || parseFloat(betAmount.toFixed(2)) > maxBetAmount) {\r\n          return socket.emit(\r\n            'game-join-error',\r\n            `Your bet must be a minimum of ${minBetAmount} credits and a maximum of ${maxBetAmount} credits!`\r\n          );\r\n        }\r\n\r\n        // Check if game accepts bets\r\n        if (GAME_STATE.status !== GAME_STATES.Starting)\r\n          return socket.emit('game-join-error', 'Game is currently in progress!');\r\n        // Check if user already betted\r\n        if (GAME_STATE.pending[user!.id] || GAME_STATE.players[user!.id])\r\n          return socket.emit('game-join-error', 'You have already joined this game!');\r\n\r\n        let autoCashOut = -1;\r\n\r\n        // Validation on the target value, if acceptable assign to auto cashout\r\n        if (typeof target === 'number' && !isNaN(target) && target > 100) {\r\n          autoCashOut = target;\r\n        }\r\n\r\n        GAME_STATE.pending[user!.id] = {\r\n          betAmount,\r\n          autoCashOut,\r\n          username: user!.username,\r\n        };\r\n\r\n        GAME_STATE.pendingCount++;\r\n\r\n        try {\r\n          // Get user from database\r\n          const dbUser = await User.findOne({ _id: user!.id });\r\n\r\n          // If user is self-excluded\r\n          if (dbUser!.selfExcludes.crash > Date.now()) {\r\n            return socket.emit(\r\n              'game-join-error',\r\n              `You have self-excluded yourself for another ${((dbUser!.selfExcludes.crash - Date.now()) / 3600000).toFixed(1)} hours.`\r\n            );\r\n          }\r\n\r\n          // If user has restricted bets\r\n          if (dbUser!.betsLocked) {\r\n            delete GAME_STATE.pending[user!.id];\r\n            GAME_STATE.pendingCount--;\r\n            return socket.emit(\r\n              'game-join-error',\r\n              'Your account has an betting restriction. Please contact support for more information.'\r\n            );\r\n          }\r\n\r\n          // If user can afford this bet\r\n          if (dbUser!.wallet < parseFloat(betAmount.toFixed(2))) {\r\n            delete GAME_STATE.pending[user!.id];\r\n            GAME_STATE.pendingCount--;\r\n            return socket.emit('game-join-error', \"You can't afford this bet!\");\r\n          }\r\n\r\n          // Remove bet amount from user's balance\r\n          await User.updateOne(\r\n            { _id: user!.id },\r\n            {\r\n              $inc: {\r\n                wallet: -Math.abs(parseFloat(betAmount.toFixed(2))),\r\n                wager: Math.abs(parseFloat(betAmount.toFixed(2))),\r\n                wagerNeededForWithdraw: -Math.abs(parseFloat(betAmount.toFixed(2))),\r\n              },\r\n            }\r\n          );\r\n          insertNewWalletTransaction(user!.id, -Math.abs(parseFloat(betAmount.toFixed(2))), 'Crash play', {\r\n            crashGameId: GAME_STATE._id,\r\n          });\r\n\r\n          // Update local wallet\r\n          socket.emit('update-wallet', -Math.abs(parseFloat(betAmount.toFixed(2))));\r\n\r\n          // Update user's race progress if there is an active race\r\n          await checkAndEnterRace(user!.id, Math.abs(parseFloat(betAmount.toFixed(2))));\r\n\r\n          // Calculate house edge\r\n          const houseRake = parseFloat(betAmount.toFixed(2)) * games.crash.houseEdge;\r\n\r\n          // Apply 5% rake to current race prize pool\r\n          await checkAndApplyRakeToRace(houseRake * 0.05);\r\n\r\n          // Apply user's rakeback if eligible\r\n          await checkAndApplyRakeback(user!.id, houseRake);\r\n\r\n          // Apply cut of house edge to user's affiliator\r\n          await checkAndApplyAffiliatorCut(user!.id, houseRake);\r\n\r\n          // Creating new bet object\r\n          const newBet = {\r\n            autoCashOut,\r\n            betAmount,\r\n            createdAt: new Date(),\r\n            playerID: user!.id,\r\n            username: user!.username,\r\n            avatar: user!.avatar,\r\n            level: getVipLevelFromWager(dbUser!.wager),\r\n            status: BET_STATES.Playing,\r\n            forcedCashout: false,\r\n          };\r\n\r\n          // Updating in db\r\n          const updateParam: UpdateParamType = { $set: {} };\r\n          updateParam.$set['players.' + user!.id] = newBet;\r\n          await CrashGame.updateOne({ _id: GAME_STATE._id }, updateParam);\r\n\r\n          // Assign to state\r\n          GAME_STATE.players[user!.id] = newBet;\r\n          GAME_STATE.pendingCount--;\r\n\r\n          const formattedBet = formatPlayerBet(newBet);\r\n          GAME_STATE.pendingBets.push(formattedBet);\r\n          emitPlayerBets();\r\n\r\n          return socket.emit('game-join-success', formattedBet);\r\n        } catch (error) {\r\n          console.error(error);\r\n\r\n          delete GAME_STATE.pending[user!.id];\r\n          GAME_STATE.pendingCount--;\r\n\r\n          return socket.emit('game-join-error', 'There was an error while proccessing your bet');\r\n        }\r\n      });\r\n\r\n      /**\r\n       * @description Cashout the current bet\r\n       */\r\n      socket.on('bet-cashout', async () => {\r\n        if (!loggedIn) return socket.emit('bet-cashout-error', 'You are not logged in!');\r\n\r\n        // Check if game is running\r\n        if (GAME_STATE.status !== GAME_STATES.InProgress)\r\n          return socket.emit('bet-cashout-error', 'There is no game in progress!');\r\n\r\n        // Calculate the current multiplier\r\n        const elapsed = Date.now() - GAME_STATE.startedAt!.getTime();\r\n        let at = growthFunc(elapsed);\r\n\r\n        // Check if cashout is over 1x\r\n        if (at < 101) return socket.emit('bet-cashout-error', 'The minimum cashout is 1.01x!');\r\n\r\n        // Find bet from state\r\n        const bet = GAME_STATE.players[user!.id];\r\n\r\n        // Check if bet exists\r\n        if (!bet) return socket.emit('bet-cashout-error', \"Coudn't find your bet!\");\r\n\r\n        // Check if the current multiplier is over the auto cashout\r\n        if (bet.autoCashOut > 100 && bet.autoCashOut <= at) {\r\n          at = bet.autoCashOut;\r\n        }\r\n\r\n        // Check if current multiplier is even possible\r\n        if (at > GAME_STATE.crashPoint!) return socket.emit('bet-cashout-error', 'The game has already ended!');\r\n\r\n        // Check if user already cashed out\r\n        if (bet.status !== BET_STATES.Playing) return socket.emit('bet-cashout-error', 'You have already cashed out!');\r\n\r\n        // Send cashout request to handler\r\n        doCashOut(bet.playerID, at, false, (err, result) => {\r\n          if (err) {\r\n            console.log(colors.cyan(`Crash >> There was an error while trying to cashout a player`), err);\r\n            return socket.emit('bet-cashout-error', 'There was an error while cashing out!');\r\n          }\r\n\r\n          socket.emit('bet-cashout-success', result);\r\n        });\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\n// Export functions\r\nexport { listen, getCurrentGame, getPrivateHash, formatGame, formatGameHistory, getGameHistory };\r\n","// Import Dependencies\r\nimport colors from 'colors/safe.js';\r\nimport { Socket } from 'socket.io';\r\nimport { ServerToClientEvents, ClientToServerEvents, InterServerEvents, SocketData } from '@/common/types';\r\n\r\n// Declare variables\r\nconst TIME_LIMIT = 250; // How often the socket can emit an event (ms)\r\n\r\n// Define a type for the packet to improve type safety\r\ntype PacketType = [string, ...any[]];\r\n\r\n// Socket.io socket middleware\r\nconst throttleConnections =\r\n  (socket: Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>) =>\r\n  (packet: PacketType, next: (err?: any) => void) => {\r\n    if (canBeServed(socket, packet)) return next();\r\n    else return socket.emit('notify-error', 'Slow down! You must wait a while before doing that again.');\r\n  };\r\n\r\n// If socket connection can be served\r\nconst canBeServed = (\r\n  socket: Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>,\r\n  packet: PacketType\r\n) => {\r\n  // If socket is marked for disconnect, deny access\r\n  if (socket.data.markedForDisconnect) return false;\r\n\r\n  // Get last request timestamp\r\n  const previous = socket.data.lastAccess;\r\n  const now = Date.now();\r\n\r\n  // If socket had previous interaction\r\n  if (previous) {\r\n    // Get time difference\r\n    const diff = now - previous;\r\n\r\n    // If it was an auth packet\r\n    if (packet[0] === 'auth') {\r\n      // Else add a last access timestamp and move on\r\n      socket.data.lastAccess = now;\r\n      return true;\r\n    }\r\n\r\n    // Check the time difference and disconnect if needed\r\n    if (diff < TIME_LIMIT) {\r\n      // Set socket as not serveable\r\n      socket.data.markedForDisconnect = true;\r\n\r\n      const clientIp = socket.handshake.headers['x-real-ip'];\r\n\r\n      // Timeout to disconnect the socket\r\n      setTimeout(() => {\r\n        console.log(\r\n          colors.gray('Socket >> IP:'),\r\n          colors.white(String(clientIp)),\r\n          colors.gray(`Packet: [${packet.toString()}] NSP: ${socket.nsp.name} Disconnected, reason:`),\r\n          colors.red('TOO_MANY_EMITS')\r\n        );\r\n        socket.emit('connection_kicked');\r\n        // Disconnect the underlying connection\r\n        socket.disconnect(true);\r\n      }, 1000);\r\n\r\n      // Deny access\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Else add a last access timestamp and move on\r\n  socket.data.lastAccess = now;\r\n  return true;\r\n};\r\n\r\n// Export the functions\r\nexport default throttleConnections;\r\n","export const site = {\r\n  // Site configurations on server startup\r\n  enableMaintenanceOnStart: false,\r\n  manualWithdrawsEnabled: true,\r\n  enableLoginOnStart: true,\r\n  // Site endpoints\r\n  backend: {\r\n    productionUrl: '', //kujiracasino.com is virtual domain\r\n    developmentUrl: 'http://localhost:8080',\r\n  },\r\n  frontend: {\r\n    productionUrl: '', //localhost do http://localhost:3000 // else if you deploy it put \"https://kujiracasino.com\"\r\n    developmentUrl: 'http://localhost:3000',\r\n  },\r\n  adminFrontend: {\r\n    productionUrl: '',\r\n    developmentUrl: '',\r\n  },\r\n};\r\n\r\n// Each specific game configuration\r\nexport const database = {\r\n  developmentMongoURI: 'mongodb://127.0.0.1:27017/solcrash', // MongoURI to use in development\r\n  productionMongoURI: 'mongodb+srv://oliverb25f:FujiOka8-1225@cluster0.ughyjc0.mongodb.net/crash', // MongoURI to use in production\r\n};\r\n\r\nexport const games = {\r\n  exampleGame: {\r\n    minBetAmount: 1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.1, // House fee percentage\r\n  },\r\n  race: {\r\n    prizeDistribution: [40, 20, 14.5, 7, 5.5, 4.5, 3.5, 2.5, 1.5, 1], // How is the prize distributed (place = index + 1)\r\n  },\r\n  vip: {\r\n    minDepositForWithdraw: 5, // You must have deposited atleast this amount before withdrawing\r\n    minWithdrawAmount: 5, // Minimum Withdraw Amount\r\n    levelToChat: 2, // The level amount you need to chat\r\n    levelToTip: 15, // The level to use the tip feature in chat\r\n    levelToRain: 10, // The level amount to start a rain\r\n    wagerToJoinRain: 5, // The wager amount to join the rain in chat\r\n    minRakebackClaim: 2, // The min rakeback amount you need to claim rakeback\r\n    numLevels: 500, // Number of total levels\r\n    minWager: 0, // minWager\r\n    maxWager: 502007, // maxWager\r\n    rakeback: 21.66, // Max rakeback\r\n    vipLevelNAME: ['Beginner', 'Professional', 'Expert', 'Crown'],\r\n    vipLevelCOLORS: ['rgb(215, 117, 88)', 'rgb(71, 190, 219)', 'rgb(96, 183, 100)', 'rgb(152, 38, 38)'],\r\n  },\r\n  affiliates: {\r\n    earningPercentage: 10, // How many percentage of house edge the affiliator will get\r\n  },\r\n  coinflip: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100000, // Max bet amount (in coins)\r\n    feePercentage: 0.05, // House fee percentage\r\n  },\r\n  crash: {\r\n    minBetAmount: 0.1, // Min bet amount (in coins)\r\n    maxBetAmount: 100, // Max bet amount (in coins)\r\n    maxProfit: 500, // Max profit on crash, forces auto cashout\r\n    houseEdge: 0.05, // House edge percentage\r\n  },\r\n};\r\n\r\nexport const blochain = {\r\n  // EOS Blockchain provider API root url\r\n  // without following slashes\r\n  httpProviderApi: 'http://eos.greymass.com',\r\n};\r\n\r\nexport const authentication = {\r\n  jwtSecret: 'vf4Boy2WT1bVgphxFqjEY2GjciChkXvf4Boy2WT1hkXv2', // Secret used to sign JWT's. KEEP THIS AS A SECRET 45 length\r\n  jwtExpirationTime: 360000, // JWT-token expiration time (in seconds)\r\n  revenueId: '65ab8f6ed19ce703808382b2',\r\n};\r\n","// Require Dependencies\r\nimport { games } from '../config/index.js';\r\nimport crypto from 'crypto';\r\nimport Chance from 'chance';\r\nimport { generateHex, getPublicSeed } from './blockchain.js';\r\n\r\n// Generate a secure random number\r\nconst generatePrivateSeed = async (): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    crypto.randomBytes(256, (error, buffer) => {\r\n      if (error) reject(error);\r\n      else resolve(buffer.toString('hex'));\r\n    });\r\n  });\r\n};\r\n\r\n// Hash an input (private seed) to SHA256\r\nconst buildPrivateHash = async (seed: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const hash = crypto.createHash('sha256').update(seed).digest('hex');\r\n\r\n      resolve(hash);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate a private seed and hash pair\r\nconst generatePrivateSeedHashPair = async (): Promise<{ seed: string; hash: string }> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const seed = await generatePrivateSeed();\r\n      const hash = await buildPrivateHash(seed);\r\n\r\n      resolve({ seed, hash });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate coinflip random data\r\nconst generateCoinflipRandom = async (\r\n  gameId: string,\r\n  privateSeed: string\r\n): Promise<{ publicSeed: string; module: number }> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      // Get a new public seed from blockchain\r\n      const publicSeed = await getPublicSeed();\r\n\r\n      // Construct a new chance instance with\r\n      // privateSeed-roundId-publicSeed pair\r\n      const chance = new Chance(`${privateSeed}-${gameId}-${publicSeed}`);\r\n\r\n      // Generate a random, repeatable module to determine round result\r\n      const module = chance.floating({ min: 0, max: 60, fixed: 7 });\r\n\r\n      // Resolve promise and return data\r\n      resolve({ publicSeed, module });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate crash random data\r\nconst generateCrashRandom = async (privateSeed: string): Promise<{ publicSeed: string; crashPoint: number }> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      // Get a new public seed from blockchain\r\n      const publicSeed = generateHex(); //await getPublicSeed();\r\n      // Generate Crash Point with seed and salt\r\n      const crashPoint = generateCrashPoint(privateSeed, publicSeed);\r\n      // Resolve promise and return data\r\n      resolve({ publicSeed, crashPoint });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nconst generateCrashPoint = (seed: string, salt: string): number => {\r\n  const hash = crypto.createHmac('sha256', seed).update(salt).digest('hex');\r\n\r\n  const hs = Math.floor(100 / (games.crash.houseEdge * 100));\r\n  if (isCrashHashDivisible(hash, hs)) {\r\n    return 100;\r\n  }\r\n\r\n  const h = parseInt(hash.slice(0, 52 / 4), 16);\r\n  const e = Math.pow(2, 52);\r\n\r\n  return Math.floor((100 * e - h) / (e - h));\r\n};\r\n\r\nconst isCrashHashDivisible = (hash: string, mod: number): boolean => {\r\n  let val = 0;\r\n\r\n  let o = hash.length % 4;\r\n  for (let i = o > 0 ? o - 4 : 0; i < hash.length; i += 4) {\r\n    val = ((val << 16) + parseInt(hash.substring(i, i + 4), 16)) % mod;\r\n  }\r\n\r\n  return val === 0;\r\n};\r\n\r\n// Export all functions\r\nexport { generatePrivateSeedHashPair, generateCoinflipRandom, generateCrashRandom };\r\n","// Require Dependencies\r\nimport { JsonRpc } from 'eosjs';\r\nimport { blochain } from '../config/index.js';\r\nimport fetch from 'node-fetch'; // node only; not needed in browsers\r\nconst rpc = new JsonRpc(blochain.httpProviderApi, { fetch });\r\n\r\n// Grab EOS block with id\r\nconst getPublicSeed = async (): Promise<string> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const info = await rpc.get_info();\r\n      const blockNumber = info.last_irreversible_block_num + 1;\r\n      const block = await rpc.get_block(blockNumber || 1);\r\n      resolve(block.id);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Generate Hash\r\nconst generateHex = () => {\r\n  let result = '';\r\n  for (let i = 0; i < 64; i++) {\r\n    result += Math.floor(Math.random() * 16)\r\n      .toString(16)\r\n      .padStart(2, '0');\r\n  }\r\n  return result;\r\n};\r\n\r\n// Export functions\r\nexport { getPublicSeed, generateHex };\r\n","// Import Dependencies\r\nimport mongoose from \"mongoose\";\r\n\r\n// Destructure Schema Types\r\nconst { Schema, Types: SchemaTypes } = mongoose;\r\n\r\n// Setup Race Schema\r\nconst RaceSchema = new Schema({\r\n  // Basic fields\r\n  active: Boolean,\r\n  prize: Number,\r\n  endingDate: Date,\r\n\r\n  // Race winners\r\n  winners: {\r\n    type: [\r\n      {\r\n        type: SchemaTypes.ObjectId,\r\n        ref: \"User\",\r\n      },\r\n    ],\r\n    default: [],\r\n  },\r\n\r\n  // When race was created\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Create and export the new model\r\nconst Race = mongoose.model(\"Race\", RaceSchema);\r\n\r\nexport default Race;\r\n","// Require Dependencies\r\nimport mongoose from 'mongoose'\r\nconst SchemaTypes = mongoose.Schema.Types;\r\n\r\n// Setup RaceEntry Schema\r\nconst RaceEntrySchema = new mongoose.Schema({\r\n  // How much user has contributed to this race\r\n  value: Number,\r\n\r\n  // Who owns this entry\r\n  _user: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: \"User\",\r\n  },\r\n\r\n  user_level: {\r\n    type: String\r\n  },\r\n\r\n  user_levelColor: {\r\n    type: String\r\n  },\r\n\r\n  username: {\r\n    type: String\r\n  },\r\n\r\n  avatar: {\r\n    type: String\r\n  },\r\n\r\n  // What race is this entry for\r\n  _race: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: \"Race\",\r\n  },\r\n\r\n  // When race was created\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Create and export the new model\r\nconst RaceEntry = mongoose.model(\r\n  \"RaceEntry\",\r\n  RaceEntrySchema\r\n)\r\n\r\nexport default RaceEntry;","// Import Dependencies\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\n// Destructure Schema Types\r\nconst { Schema, Types } = mongoose;\r\n\r\n// Setup User Schema\r\nconst UserSchema = new Schema({\r\n  // Authentication related fields\r\n  provider: String,\r\n  providerId: String,\r\n  username: String,\r\n  password: String,\r\n  avatar: String,\r\n\r\n  // User's on-site rank\r\n  rank: {\r\n    type: Number,\r\n    default: 1,\r\n    /**\r\n     * Ranks:\r\n     *\r\n     * 1 = User\r\n     * 2 = Sponsor\r\n     * 3 = Developer\r\n     * 4 = Moderator\r\n     * 5 = Admin\r\n     */\r\n  },\r\n\r\n  // Site balance\r\n  wallet: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Wager amount\r\n  wager: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Holds user's crypto address information (addresses)\r\n  crypto: Object,\r\n\r\n  // Whether the user has verified their account (via mobile phone or csgo loyalty badge) normal it is false\r\n  hasVerifiedAccount: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n\r\n  // Store their phone number to prevent multi-account verifications\r\n  verifiedPhoneNumber: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  // When the account was verified\r\n  accountVerified: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unix ms timestamp when the ban will end, 0 = no ban\r\n  banExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // Unix ms timestamps when the self-exclude will end, 0 = no ban\r\n  selfExcludes: {\r\n    crash: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    jackpot: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    coinflip: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    roulette: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n\r\n  // Unix ms timestamp when the mute will end, 0 = no mute\r\n  muteExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // If user has restricted transactions\r\n  transactionsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // If user has restricted bets\r\n  betsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // UserID of the user who affiliated\r\n  _affiliatedBy: {\r\n    type: Types.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n\r\n  // When the affiliate was redeemed\r\n  affiliateClaimed: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unique affiliate code\r\n  affiliateCode: {\r\n    type: String,\r\n    default: null,\r\n    // unique: true, // doesn't work with multiple \"null\" values :(\r\n  },\r\n\r\n  // User affiliation bonus amount\r\n  affiliateMoney: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much affiliation bonus has been claimed (withdrawn)\r\n  affiliateMoneyCollected: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  forgotExpires: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much rakeback has been collected\r\n  rakebackBalance: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Keep track of 50% deposit amount\r\n  // required by mitch :/\r\n  wagerNeededForWithdraw: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of deposits\r\n  totalDeposited: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of withdraws\r\n  totalWithdrawn: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User custom wager limit (for sponsors)\r\n  customWagerLimit: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User avatar last update\r\n  avatarLastUpdate: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // When user was created (registered)\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport interface IUserDocumentType {\r\n  provider: string;\r\n  providerId: string;\r\n  username: string;\r\n  password: string;\r\n  avatar: string;\r\n  rank: number;\r\n  wallet: number;\r\n  wager: number;\r\n  crypto: any; // Specify more detailed type if possible\r\n  hasVerifiedAccount: boolean;\r\n  verifiedPhoneNumber: string | null;\r\n  accountVerified: Date | null;\r\n  banExpires: string;\r\n  selfExcludes: {\r\n    crash: number;\r\n    jackpot: number;\r\n    coinflip: number;\r\n    roulette: number;\r\n  };\r\n  muteExpires: string;\r\n  transactionsLocked: boolean;\r\n  betsLocked: boolean;\r\n  _affiliatedBy: mongoose.Schema.Types.ObjectId | null;\r\n  affiliateClaimed: Date | null;\r\n  affiliateCode: string | null;\r\n  affiliateMoney: number;\r\n  affiliateMoneyCollected: number;\r\n  forgotToken: string | null;\r\n  forgotExpires: number;\r\n  rakebackBalance: number;\r\n  wagerNeededForWithdraw: number;\r\n  totalDeposited: number;\r\n  totalWithdrawn: number;\r\n  customWagerLimit: number;\r\n  avatarLastUpdate: number;\r\n  created: Date;\r\n}\r\n\r\n// Extend Document to include the User schema fields\r\nexport interface UserDocumentType extends Document, IUserDocumentType {}\r\n\r\n// Create and export the new model\r\nconst User = mongoose.model<UserDocumentType>('User', UserSchema);\r\n\r\nexport default User;\r\n","// Import Dependencies\r\nimport mongoose, { Document } from 'mongoose';\r\nconst { Schema, SchemaTypes } = mongoose;\r\n\r\n// Setup User Schema\r\nconst UseroSchema = new Schema({\r\n  // Authentication related fields\r\n  provider: String,\r\n  providerId: String,\r\n  username: String,\r\n  password: String,\r\n  avatar: String,\r\n\r\n  // User's on-site rank\r\n  rank: {\r\n    type: Number,\r\n    default: 1,\r\n    /**\r\n     * Ranks:\r\n     *\r\n     * 1 = User\r\n     * 2 = Sponsor\r\n     * 3 = Developer\r\n     * 4 = Moderator\r\n     * 5 = Admin\r\n     */\r\n  },\r\n\r\n  // Site balance\r\n  wallet: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Wager amount\r\n  wager: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Holds user's crypto address information (addresses)\r\n  crypto: Object,\r\n\r\n  // Whether the user has verified their account (via mobile phone or csgo loyalty badge) normal it is false\r\n  hasVerifiedAccount: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n\r\n  // Store their phone number to prevent multi-account verifications\r\n  verifiedPhoneNumber: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  // When the account was verified\r\n  accountVerified: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unix ms timestamp when the ban will end, 0 = no ban\r\n  banExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // Unix ms timestamps when the self-exclude will end, 0 = no ban\r\n  selfExcludes: {\r\n    crash: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    jackpot: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    coinflip: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    roulette: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n\r\n  // Unix ms timestamp when the mute will end, 0 = no mute\r\n  muteExpires: {\r\n    type: String,\r\n    default: '0',\r\n  },\r\n\r\n  // If user has restricted transactions\r\n  transactionsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // If user has restricted bets\r\n  betsLocked: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n\r\n  // UserID of the user who affiliated\r\n  _affiliatedBy: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n\r\n  // When the affiliate was redeemed\r\n  affiliateClaimed: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n\r\n  // Unique affiliate code\r\n  affiliateCode: {\r\n    type: String,\r\n    default: null,\r\n    // unique: true, // doesn't work with multiple \"null\" values :(\r\n  },\r\n\r\n  // User affiliation bonus amount\r\n  affiliateMoney: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much affiliation bonus has been claimed (withdrawn)\r\n  affiliateMoneyCollected: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n\r\n  forgotExpires: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // How much rakeback has been collected\r\n  rakebackBalance: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Keep track of 50% deposit amount\r\n  // required by mitch :/\r\n  wagerNeededForWithdraw: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of deposits\r\n  totalDeposited: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // Total amount of withdraws\r\n  totalWithdrawn: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User custom wager limit (for sponsors)\r\n  customWagerLimit: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // User avatar last update\r\n  avatarLastUpdate: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n\r\n  // When user was created (registered)\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nexport interface IUseroDocumentType extends Document {\r\n  provider: string;\r\n  providerId: string;\r\n  username: string;\r\n  password: string;\r\n  avatar: string;\r\n  rank: number;\r\n  wallet: number;\r\n  wager: number;\r\n  crypto: Record<string, any>;\r\n  hasVerifiedAccount: boolean;\r\n  verifiedPhoneNumber: string | null;\r\n  accountVerified: Date | null;\r\n  banExpires: string;\r\n  selfExcludes: {\r\n    crash: number;\r\n    jackpot: number;\r\n    coinflip: number;\r\n    roulette: number;\r\n  };\r\n  muteExpires: string;\r\n  transactionsLocked: boolean;\r\n  betsLocked: boolean;\r\n  _affiliatedBy: mongoose.Types.ObjectId | null;\r\n  affiliateClaimed: Date | null;\r\n  affiliateCode: string | null;\r\n  affiliateMoney: number;\r\n  affiliateMoneyCollected: number;\r\n  forgotToken: string | null;\r\n  forgotExpires: number;\r\n  rakebackBalance: number;\r\n  wagerNeededForWithdraw: number;\r\n  totalDeposited: number;\r\n  totalWithdrawn: number;\r\n  customWagerLimit: number;\r\n  avatarLastUpdate: number;\r\n  created: Date;\r\n}\r\n\r\nexport interface UseroDocumentType extends Document, IUseroDocumentType {}\r\n\r\n// Create and export the new model\r\nconst Usero = mongoose.model<UseroDocumentType>('Usero', UseroSchema);\r\n\r\nexport default Usero;\r\n","// Import Dependencies\r\nimport User from '../common/models/User.js';\r\nimport Usero from '../common/models/Usero.js';\r\nimport { games } from '../config/index.js';\r\n\r\nimport { VIPLevelType } from '@/common/types/vipType.js';\r\n\r\nconst { numLevels, minWager, maxWager, rakeback, vipLevelNAME, vipLevelCOLORS } = games.vip;\r\n\r\n// Generate VIP Levels\r\nconst generateVIPLevels = (numLevels, minWager, maxWager, rakeback, levelNames, levelColors) => {\r\n  const levels = [];\r\n  for (let i = 0; i < numLevels; i++) {\r\n    const level = {\r\n      name: (i + 1).toString(),\r\n      wagerNeeded: (minWager + (maxWager - minWager) * Math.pow(i / numLevels, 2)).toFixed(2),\r\n      rakebackPercentage: (rakeback / (1 + Math.exp(-5 * (i / numLevels - 0.5)))).toFixed(2),\r\n      levelName: levelNames[Math.floor((i * levelNames.length) / numLevels)],\r\n      levelColor: levelColors[Math.floor((i * levelColors.length) / numLevels)],\r\n    };\r\n    levels.push(level);\r\n  }\r\n  return levels;\r\n};\r\n\r\nconst vipLevels = generateVIPLevels(numLevels, minWager, maxWager, rakeback, vipLevelNAME, vipLevelCOLORS);\r\n\r\n// Get user VIP level\r\nconst getVipLevelFromWager = (wager): VIPLevelType => {\r\n  if (wager < vipLevels[1].wagerNeeded) {\r\n    return vipLevels[0];\r\n  } else if (wager > vipLevels[numLevels - 1].wagerNeeded) {\r\n    return vipLevels[numLevels - 1];\r\n  } else {\r\n    return vipLevels.filter((level) => wager >= level.wagerNeeded).sort((a, b) => b.wagerNeeded - a.wagerNeeded)[0];\r\n  }\r\n};\r\n\r\n// Get user next VIP level\r\nconst getNextVipLevelFromWager = (wager) => {\r\n  return vipLevels.filter((level) => wager < level.wagerNeeded).sort((a, b) => a.wagerNeeded - b.wagerNeeded)[0];\r\n};\r\n\r\n// Check if user is eligible for rakeback\r\nconst checkAndApplyRakeback = async (userId, houseRake) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const usero = await Usero.findOne({ _id: userId });\r\n\r\n      if (usero) {\r\n        // Skip rakeback calculation for excluded users\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const user = await User.findOne({ _id: userId });\r\n\r\n      if (!user) {\r\n        // User not found\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      // Find the corresponding level\r\n      const currentLevel = getVipLevelFromWager(user.wager);\r\n\r\n      // Update document\r\n      await User.updateOne(\r\n        { _id: user.id },\r\n        {\r\n          $inc: { rakebackBalance: houseRake * (currentLevel.rakebackPercentage / 100) },\r\n        }\r\n      );\r\n\r\n      // Resolve to continue successfully\r\n      resolve();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// Export functions\r\nexport {\r\n  vipLevels,\r\n  vipLevelNAME,\r\n  vipLevelCOLORS,\r\n  getVipLevelFromWager,\r\n  getNextVipLevelFromWager,\r\n  checkAndApplyRakeback,\r\n};\r\n","// Require Dependencies\r\nimport Race from '../common/models/Race.js';\r\nimport RaceEntry from '../common/models/RaceEntry.js';\r\nimport User from '../common/models/User.js';\r\nimport Usero from '../common/models/Usero.js';\r\n\r\nimport { getVipLevelFromWager } from './vip.js';\r\n\r\n// Enter an active race (if there is currently one active)\r\nasync function checkAndEnterRace(userId: string, amount: number): Promise<void> {\r\n  return new Promise<void>(async (resolve, reject) => {\r\n    try {\r\n      // Get active race\r\n      const activeRace = await Race.findOne({ active: true });\r\n\r\n      // If there is an active race\r\n      if (activeRace) {\r\n        // Find the user in the fakeUsers array\r\n        const users = await Usero.findOne({ _id: userId });\r\n\r\n        if (users) {\r\n          // If user is not in the fakeUsers array, query the database\r\n          const user = await Usero.findOne({ _id: userId });\r\n\r\n          if (!user || user.rank > 1) {\r\n            // If user doesn't exist or isn't allowed to participate\r\n            // Resolve to successfully continue\r\n            return resolve();\r\n          }\r\n\r\n          const existingEntry = await RaceEntry.findOne({\r\n            _user: userId,\r\n            _race: activeRace.id,\r\n          });\r\n\r\n          if (existingEntry) {\r\n            await RaceEntry.updateOne(\r\n              { _id: existingEntry.id },\r\n              {\r\n                $inc: { value: amount },\r\n                $set: {\r\n                  user_level: getVipLevelFromWager(user.wager).name,\r\n                  user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n                  username: user.username,\r\n                  avatar: user.avatar,\r\n                },\r\n              }\r\n            );\r\n          } else {\r\n            const newEntry = new RaceEntry({\r\n              value: amount,\r\n              _user: userId,\r\n              user_level: getVipLevelFromWager(user.wager).name,\r\n              user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n              _race: activeRace.id,\r\n              username: user.username,\r\n              avatar: user.avatar,\r\n            });\r\n\r\n            await newEntry.save();\r\n          }\r\n        } else {\r\n          // If user is not in the fakeUsers array, query the database\r\n          const user = await User.findOne({ _id: userId });\r\n\r\n          if (!user || user.rank > 1) {\r\n            // If user doesn't exist or isn't allowed to participate\r\n            // Resolve to successfully continue\r\n            return resolve();\r\n          }\r\n\r\n          const existingEntry = await RaceEntry.findOne({\r\n            _user: userId,\r\n            _race: activeRace.id,\r\n          });\r\n\r\n          if (existingEntry) {\r\n            await RaceEntry.updateOne(\r\n              { _id: existingEntry.id },\r\n              {\r\n                $inc: { value: amount },\r\n                $set: {\r\n                  user_level: getVipLevelFromWager(user.wager).name,\r\n                  user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n                  username: user.username,\r\n                  avatar: user.avatar,\r\n                },\r\n              }\r\n            );\r\n          } else {\r\n            const newEntry = new RaceEntry({\r\n              value: amount,\r\n              _user: userId,\r\n              user_level: getVipLevelFromWager(user.wager).name,\r\n              user_levelColor: getVipLevelFromWager(user.wager).levelColor,\r\n              _race: activeRace.id,\r\n              username: user.username,\r\n              avatar: user.avatar,\r\n            });\r\n\r\n            await newEntry.save();\r\n          }\r\n        }\r\n\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      } else {\r\n        // If there is no active race\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Increment active race prize by rake% (if there is currently one active)\r\nasync function checkAndApplyRakeToRace(rakeValue: number) {\r\n  return new Promise<void>(async (resolve, reject) => {\r\n    try {\r\n      // Get active race\r\n      const activeRace = await Race.findOne({ active: true });\r\n\r\n      // If there is an active race\r\n      if (activeRace) {\r\n        // Update and increment race prize | here was something changed from the original\r\n        await Race.updateOne({ _id: activeRace.id }, { $inc: { prize: 0 } });\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      } else {\r\n        // Resolve to successfully continue\r\n        resolve();\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Export functions\r\nexport { checkAndEnterRace, checkAndApplyRakeToRace };\r\n","// Require Dependencies\r\nimport User from '@/common/models/User.js';\r\nimport Usero from '@/common/models/Usero.js';\r\nimport { games } from '@/config/index.js';\r\n\r\n// Give affiliator his cut of wager\r\nasync function checkAndApplyAffiliatorCut(userId, houseRake) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const usero = await Usero.findOne({ _id: userId });\r\n\r\n      if (usero) {\r\n        // Skip rakeback calculation for excluded users\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const user = await User.findOne({ _id: userId });\r\n\r\n      if (!user) {\r\n        // User not found\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      // Find the affiliator\r\n      const affiliator = await User.findOne({ _id: user._affiliatedBy });\r\n\r\n      // If user has affiliator\r\n      if (affiliator) {\r\n        // Update document\r\n        await User.updateOne(\r\n          { _id: affiliator.id },\r\n          {\r\n            $inc: {\r\n              affiliateMoney: houseRake * (games.affiliates.earningPercentage / 100),\r\n            },\r\n          }\r\n        );\r\n\r\n        // Resolve to continue successfully\r\n        resolve();\r\n      } else {\r\n        // Resolve to continue successfully\r\n        resolve();\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Export functions\r\nexport { checkAndApplyAffiliatorCut };\r\n","// Import Dependencies\r\nimport { site } from '@/config/index.js';\r\n\r\n// Store site toggle switch states here\r\n// and initialize them to config values\r\nlet MAINTENANCE_ENABLED = site.enableMaintenanceOnStart;\r\nlet LOGIN_ENABLED = site.enableLoginOnStart;\r\nlet DEPOSITS_ENABLED = true;\r\nlet WITHDRAWS_ENABLED = true;\r\nlet COINFLIP_ENABLED = true;\r\nlet CRASH_ENABLED = true;\r\n\r\n// Create getters\r\nconst getMaintenanceState = () => MAINTENANCE_ENABLED;\r\nconst getLoginState = () => LOGIN_ENABLED;\r\nconst getDepositState = () => DEPOSITS_ENABLED;\r\nconst getWithdrawState = () => WITHDRAWS_ENABLED;\r\nconst getCoinflipState = () => COINFLIP_ENABLED;\r\nconst getCrashState = () => CRASH_ENABLED;\r\n\r\n// Create reducers\r\nconst toggleMaintenance = () => {\r\n  MAINTENANCE_ENABLED = !MAINTENANCE_ENABLED;\r\n  return true;\r\n};\r\nconst toggleLogin = () => {\r\n  LOGIN_ENABLED = !LOGIN_ENABLED;\r\n  return true;\r\n};\r\nconst toggleDeposits = () => {\r\n  DEPOSITS_ENABLED = !DEPOSITS_ENABLED;\r\n  return true;\r\n};\r\nconst toggleWithdraws = () => {\r\n  WITHDRAWS_ENABLED = !WITHDRAWS_ENABLED;\r\n  return true;\r\n};\r\nconst toggleCoinflip = () => {\r\n  COINFLIP_ENABLED = !COINFLIP_ENABLED;\r\n  return true;\r\n};\r\nconst toggleCrash = () => {\r\n  CRASH_ENABLED = !CRASH_ENABLED;\r\n  return true;\r\n};\r\n\r\n// Combine transaction getters and reducers\r\nconst transactionState = {\r\n  getDepositState,\r\n  toggleDeposits,\r\n  getWithdrawState,\r\n  toggleWithdraws,\r\n};\r\n\r\n// Combine game getters and reducers\r\nconst gameState = {\r\n  getCoinflipState,\r\n  toggleCoinflip,\r\n  getCrashState,\r\n  toggleCrash,\r\n};\r\n\r\n// Export functions\r\nexport {\r\n  getMaintenanceState,\r\n  toggleMaintenance,\r\n  getLoginState,\r\n  toggleLogin,\r\n  getDepositState,\r\n  toggleDeposits,\r\n  getWithdrawState,\r\n  toggleWithdraws,\r\n  getCoinflipState,\r\n  toggleCoinflip,\r\n  getCrashState,\r\n  toggleCrash,\r\n};\r\n","// Import Dependencies\r\nimport mongoose from \"mongoose\";\r\nconst { Schema, SchemaTypes } = mongoose;\r\n\r\n// Setup WalletTransaction Schema\r\nconst WalletTransactionSchema = new Schema({\r\n  // Amount that was increased or decreased\r\n  amount: Number,\r\n\r\n  // Reason for this wallet transaction\r\n  reason: String,\r\n\r\n  // Extra data relating to this transaction\r\n  // game data, crypto transaction data, etc.\r\n  extraData: {\r\n    coinflipGameId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"CoinflipGame\",\r\n    },\r\n    jackpotGameId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"JackpotGame\",\r\n    },\r\n    rouletteGameId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"RouletteGame\",\r\n    },\r\n    crashGameId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"CrashGame\",\r\n    },\r\n    transactionId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"CryptoTransaction\",\r\n    },\r\n    couponId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"CouponCode\",\r\n    },\r\n    affiliatorId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"User\",\r\n    },\r\n    modifierId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"User\",\r\n    },\r\n    raceId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"Race\",\r\n    },\r\n    triviaGameId: {\r\n      type: SchemaTypes.ObjectId,\r\n      ref: \"Trivia\",\r\n    },\r\n  },\r\n\r\n  // What user does this belong to\r\n  _user: {\r\n    type: SchemaTypes.ObjectId,\r\n    ref: \"User\",\r\n  },\r\n\r\n  // When document was inserted\r\n  created: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Create and export the new model\r\nconst WalletTransaction = mongoose.model(\"WalletTransaction\", WalletTransactionSchema);\r\nexport default WalletTransaction;\r\n","// Import Dependencies\r\nimport WalletTransaction from '@/common/models/WalletTransaction.js';\r\n\r\n// Insert a new wallet transaction to the database\r\nconst insertNewWalletTransaction = async (userId, amount, reason, extraData) => {\r\n  try {\r\n    // Construct new document from given data\r\n    const data = { _user: userId, amount, reason, extraData };\r\n    const newTransaction = new WalletTransaction(data);\r\n\r\n    // Save the new document\r\n    await newTransaction.save();\r\n\r\n    // Return created document\r\n    return newTransaction.toObject();\r\n  } catch (error) {\r\n    console.error('Error while inserting wallet transaction!', error);\r\n    throw new Error('Failed to insert wallet transaction!');\r\n  }\r\n};\r\n\r\n// Export function\r\nexport default insertNewWalletTransaction;\r\n","// Require Dependencies\r\nimport mongoose, { Document, Model } from 'mongoose';\r\n\r\n// Setup CrashGame Schema\r\nconst CrashGameSchema = new mongoose.Schema(\r\n  {\r\n    // Basic fields\r\n    crashPoint: Number,\r\n    players: Object,\r\n    refundedPlayers: Array,\r\n\r\n    // Provably Fair fields\r\n    privateSeed: String,\r\n    privateHash: String,\r\n    publicSeed: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    // Game status\r\n    status: {\r\n      type: Number,\r\n      default: 1,\r\n      /**\r\n       * Status list:\r\n       *\r\n       * 1 = Not Started\r\n       * 2 = Starting\r\n       * 3 = In Progress\r\n       * 4 = Over\r\n       * 5 = Blocking\r\n       * 6 = Refunded\r\n       */\r\n    },\r\n\r\n    // When game was created\r\n    created: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n\r\n    // When game was started\r\n    startedAt: {\r\n      type: Date,\r\n    },\r\n  },\r\n  {\r\n    minimize: false,\r\n  }\r\n);\r\n\r\nexport interface CrashGameDocument extends Document {\r\n  crashPoint?: number; // Optional as per schema\r\n  players: Record<string, any>; // Required as per schema\r\n  refundedPlayers?: any[]; // Optional as per schema\r\n  privateSeed?: string; // Optional as per schema\r\n  privateHash?: string; // Optional as per schema\r\n  publicSeed?: string; // Optional as per schema, with default null\r\n  status: number; // Required as per schema\r\n  created?: Date; // Optional as per schema, with default Date.now\r\n  startedAt?: Date; // Optional as per schema\r\n}\r\n\r\n// Create and export the new model\r\nconst CrashGame: Model<CrashGameDocument> = mongoose.model<CrashGameDocument>('CrashGame', CrashGameSchema);\r\n\r\nexport default CrashGame;\r\n","// Require Dependencies\r\nimport mongoose from 'mongoose'\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\n// Setup TransactionHis Schema\r\nconst RevenueSchema = new Schema({\r\n  \r\n  // Winner id\r\n  userid: {\r\n    type: Schema.Types.ObjectId,\r\n    ref:'users',\r\n    required: true\r\n  },\r\n\r\n  // Revenue type 4: coinflip, 3: jackpot, 1: roulette, 2: crash\r\n  revenueType: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n\r\n  // Balance\r\n  revenue: {\r\n    type: Number,\r\n    require: true,\r\n  },\r\n\r\n  // Last balance\r\n  lastBalance: {\r\n    type: Number,\r\n    require: true\r\n  },\r\n\r\n  created: {\r\n    type: Date,\r\n    default: Date.now\r\n  }\r\n});\r\n\r\n// Create and export the new model\r\nconst RevenueLog = mongoose.model(\r\n  \"RevenueLog\",\r\n  RevenueSchema\r\n)\r\n\r\nexport default RevenueLog;"],"mappings":"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","names":["colors","fetch","crypto","crypto","mongoose","import_mongoose","SchemaTypes","mongoose","import_mongoose","Schema","mongoose","import_mongoose","Schema","SchemaTypes","mongoose","numLevels","minWager","maxWager","rakeback","import_mongoose","Schema","SchemaTypes","mongoose","import_mongoose","mongoose","import_mongoose","Schema","mongoose","_","colors","games","jwt"]}