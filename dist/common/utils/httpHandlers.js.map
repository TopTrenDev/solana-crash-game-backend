{"version":3,"sources":["../../../src/common/utils/httpHandlers.ts","../../../src/common/models/serviceResponse.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { StatusCodes } from 'http-status-codes';\r\nimport { ZodError, ZodSchema } from 'zod';\r\n\r\nimport { ResponseStatus, ServiceResponse } from '@/common/models/serviceResponse';\r\n\r\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\r\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\r\n};\r\n\r\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    schema.parse({ body: req.body, query: req.query, params: req.params });\r\n    next();\r\n  } catch (err) {\r\n    const errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(', ')}`;\r\n    const statusCode = StatusCodes.BAD_REQUEST;\r\n    res.status(statusCode).send(new ServiceResponse<null>(ResponseStatus.Failed, errorMessage, null, statusCode));\r\n  }\r\n};\r\n","import { z } from 'zod';\r\n\r\nexport enum ResponseStatus {\r\n  Success,\r\n  Failed,\r\n}\r\n\r\nexport class ServiceResponse<T = null> {\r\n  success: boolean;\r\n  message: string;\r\n  responseObject: T;\r\n  statusCode: number;\r\n\r\n  constructor(status: ResponseStatus, message: string, responseObject: T, statusCode: number) {\r\n    this.success = status === ResponseStatus.Success;\r\n    this.message = message;\r\n    this.responseObject = responseObject;\r\n    this.statusCode = statusCode;\r\n  }\r\n}\r\n\r\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\r\n  z.object({\r\n    success: z.boolean(),\r\n    message: z.string(),\r\n    responseObject: dataSchema.optional(),\r\n    statusCode: z.number(),\r\n  });\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,+BAA4B;;;ACD5B,iBAAkB;AAOX,IAAM,kBAAN,MAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,QAAwB,SAAiB,gBAAmB,YAAoB;AAC1F,SAAK,UAAU,WAAW;AAC1B,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACpB;AACF;;;ADbO,IAAM,wBAAwB,CAAC,iBAAuC,aAAuB;AAClG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACzE;AAEO,IAAM,kBAAkB,CAAC,WAAsB,CAAC,KAAc,KAAe,SAAuB;AACzG,MAAI;AACF,WAAO,MAAM,EAAE,MAAM,IAAI,MAAM,OAAO,IAAI,OAAO,QAAQ,IAAI,OAAO,CAAC;AACrE,SAAK;AAAA,EACP,SAAS,KAAK;AACZ,UAAM,eAAe,kBAAmB,IAAiB,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,IAAI,CAAC;AAChG,UAAM,aAAa,qCAAY;AAC/B,QAAI,OAAO,UAAU,EAAE,KAAK,IAAI,gCAA6C,cAAc,MAAM,UAAU,CAAC;AAAA,EAC9G;AACF;","names":[]}