{"version":3,"sources":["../../../src/common/middleware/requestLogger.ts","../../../src/common/utils/envConfig.ts"],"sourcesContent":["import { randomUUID } from 'crypto';\r\nimport { Request, RequestHandler, Response } from 'express';\r\nimport { IncomingMessage, ServerResponse } from 'http';\r\nimport { getReasonPhrase, StatusCodes } from 'http-status-codes';\r\nimport { LevelWithSilent } from 'pino';\r\nimport { CustomAttributeKeys, Options, pinoHttp } from 'pino-http';\r\n\r\nimport { env } from '@/common/utils/envConfig';\r\n\r\nenum LogLevel {\r\n  Fatal = 'fatal',\r\n  Error = 'error',\r\n  Warn = 'warn',\r\n  Info = 'info',\r\n  Debug = 'debug',\r\n  Trace = 'trace',\r\n  Silent = 'silent',\r\n}\r\n\r\ntype PinoCustomProps = {\r\n  request: Request;\r\n  response: Response;\r\n  error: Error;\r\n  responseBody: unknown;\r\n};\r\n\r\nconst requestLogger = (options?: Options): RequestHandler[] => {\r\n  const pinoOptions: Options = {\r\n    enabled: env.isProduction,\r\n    customProps: customProps as unknown as Options['customProps'],\r\n    redact: [],\r\n    genReqId,\r\n    customLogLevel,\r\n    customSuccessMessage,\r\n    customReceivedMessage: (req) => `request received: ${req.method}`,\r\n    customErrorMessage: (_req, res) => `request errored with status code: ${res.statusCode}`,\r\n    customAttributeKeys,\r\n    ...options,\r\n  };\r\n  return [responseBodyMiddleware, pinoHttp(pinoOptions)];\r\n};\r\n\r\nconst customAttributeKeys: CustomAttributeKeys = {\r\n  req: 'request',\r\n  res: 'response',\r\n  err: 'error',\r\n  responseTime: 'timeTaken',\r\n};\r\n\r\nconst customProps = (req: Request, res: Response): PinoCustomProps => ({\r\n  request: req,\r\n  response: res,\r\n  error: res.locals.err,\r\n  responseBody: res.locals.responseBody,\r\n});\r\n\r\nconst responseBodyMiddleware: RequestHandler = (_req, res, next) => {\r\n  const isNotProduction = !env.isProduction;\r\n  if (isNotProduction) {\r\n    const originalSend = res.send;\r\n    res.send = function (content) {\r\n      res.locals.responseBody = content;\r\n      res.send = originalSend;\r\n      return originalSend.call(res, content);\r\n    };\r\n  }\r\n  next();\r\n};\r\n\r\nconst customLogLevel = (_req: IncomingMessage, res: ServerResponse<IncomingMessage>, err?: Error): LevelWithSilent => {\r\n  if (err || res.statusCode >= StatusCodes.INTERNAL_SERVER_ERROR) return LogLevel.Error;\r\n  if (res.statusCode >= StatusCodes.BAD_REQUEST) return LogLevel.Warn;\r\n  if (res.statusCode >= StatusCodes.MULTIPLE_CHOICES) return LogLevel.Silent;\r\n  return LogLevel.Info;\r\n};\r\n\r\nconst customSuccessMessage = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\r\n  if (res.statusCode === StatusCodes.NOT_FOUND) return getReasonPhrase(StatusCodes.NOT_FOUND);\r\n  return `${req.method} completed`;\r\n};\r\n\r\nconst genReqId = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\r\n  const existingID = req.id ?? req.headers['x-request-id'];\r\n  if (existingID) return existingID;\r\n  const id = randomUUID();\r\n  res.setHeader('X-Request-Id', id);\r\n  return id;\r\n};\r\n\r\nexport default requestLogger();\r\n","import dotenv from 'dotenv';\r\nimport { cleanEnv, host, num, port, str, testOnly } from 'envalid';\r\n\r\ndotenv.config();\r\n\r\nexport const env = cleanEnv(process.env, {\r\n  NODE_ENV: str({ devDefault: testOnly('test'), choices: ['development', 'production', 'test'] }),\r\n  HOST: host({ devDefault: testOnly('localhost') }),\r\n  PORT: port({ devDefault: testOnly(3000) }),\r\n  CORS_ORIGIN: str({ devDefault: testOnly('http://localhost:3000') }),\r\n  COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\r\n  COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAG3B,+BAA6C;AAE7C,uBAAuD;;;ACLvD,oBAAmB;AACnB,qBAAyD;AAEzD,cAAAA,QAAO,OAAO;AAEP,IAAM,UAAM,yBAAS,QAAQ,KAAK;AAAA,EACvC,cAAU,oBAAI,EAAE,gBAAY,yBAAS,MAAM,GAAG,SAAS,CAAC,eAAe,cAAc,MAAM,EAAE,CAAC;AAAA,EAC9F,UAAM,qBAAK,EAAE,gBAAY,yBAAS,WAAW,EAAE,CAAC;AAAA,EAChD,UAAM,qBAAK,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA,EACzC,iBAAa,oBAAI,EAAE,gBAAY,yBAAS,uBAAuB,EAAE,CAAC;AAAA,EAClE,oCAAgC,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA,EAClE,iCAA6B,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AACjE,CAAC;;;ADcD,IAAM,gBAAgB,CAAC,YAAwC;AAC7D,QAAM,cAAuB;AAAA,IAC3B,SAAS,IAAI;AAAA,IACb;AAAA,IACA,QAAQ,CAAC;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,uBAAuB,CAAC,QAAQ,qBAAqB,IAAI,MAAM;AAAA,IAC/D,oBAAoB,CAAC,MAAM,QAAQ,qCAAqC,IAAI,UAAU;AAAA,IACtF;AAAA,IACA,GAAG;AAAA,EACL;AACA,SAAO,CAAC,4BAAwB,2BAAS,WAAW,CAAC;AACvD;AAEA,IAAM,sBAA2C;AAAA,EAC/C,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,cAAc;AAChB;AAEA,IAAM,cAAc,CAAC,KAAc,SAAoC;AAAA,EACrE,SAAS;AAAA,EACT,UAAU;AAAA,EACV,OAAO,IAAI,OAAO;AAAA,EAClB,cAAc,IAAI,OAAO;AAC3B;AAEA,IAAM,yBAAyC,CAAC,MAAM,KAAK,SAAS;AAClE,QAAM,kBAAkB,CAAC,IAAI;AAC7B,MAAI,iBAAiB;AACnB,UAAM,eAAe,IAAI;AACzB,QAAI,OAAO,SAAU,SAAS;AAC5B,UAAI,OAAO,eAAe;AAC1B,UAAI,OAAO;AACX,aAAO,aAAa,KAAK,KAAK,OAAO;AAAA,IACvC;AAAA,EACF;AACA,OAAK;AACP;AAEA,IAAM,iBAAiB,CAAC,MAAuB,KAAsC,QAAiC;AACpH,MAAI,OAAO,IAAI,cAAc,qCAAY;AAAuB,WAAO;AACvE,MAAI,IAAI,cAAc,qCAAY;AAAa,WAAO;AACtD,MAAI,IAAI,cAAc,qCAAY;AAAkB,WAAO;AAC3D,SAAO;AACT;AAEA,IAAM,uBAAuB,CAAC,KAAsB,QAAyC;AAC3F,MAAI,IAAI,eAAe,qCAAY;AAAW,eAAO,0CAAgB,qCAAY,SAAS;AAC1F,SAAO,GAAG,IAAI,MAAM;AACtB;AAEA,IAAM,WAAW,CAAC,KAAsB,QAAyC;AAC/E,QAAM,aAAa,IAAI,MAAM,IAAI,QAAQ,cAAc;AACvD,MAAI;AAAY,WAAO;AACvB,QAAM,SAAK,0BAAW;AACtB,MAAI,UAAU,gBAAgB,EAAE;AAChC,SAAO;AACT;AAEA,IAAO,wBAAQ,cAAc;","names":["dotenv"]}